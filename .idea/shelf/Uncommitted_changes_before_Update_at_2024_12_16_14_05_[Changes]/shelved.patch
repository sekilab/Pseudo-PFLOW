Index: src/pseudo/gen/Commuter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage pseudo.gen;\r\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.util.concurrent.Callable;\r\n\r\nimport jp.ac.ut.csis.pflow.routing4.res.Network;\r\nimport pseudo.acs.CensusODAccessor;\r\nimport pseudo.acs.DataAccessor;\r\nimport pseudo.acs.MNLParamAccessor;\r\nimport pseudo.acs.MkChainAccessor;\r\nimport pseudo.acs.PersonAccessor;\r\nimport pseudo.acs.CensusODAccessor.EType;\r\nimport pseudo.res.Activity;\r\nimport pseudo.res.CensusOD;\r\nimport pseudo.res.City;\r\nimport pseudo.res.EGender;\r\nimport pseudo.res.ELabor;\r\nimport pseudo.res.EMarkov;\r\nimport pseudo.res.EPurpose;\r\nimport pseudo.res.ETransition;\r\nimport pseudo.res.HouseHold;\r\nimport pseudo.res.Country;\r\nimport pseudo.res.GLonLat;\r\nimport pseudo.res.Person;\r\nimport utils.Roulette;\r\n\r\npublic class Commuter extends ActGenerator {\r\n\r\n\tprivate final CensusODAccessor odAcs;\r\n\t\r\n\tpublic Commuter(Country japan,\r\n\t\t\t\t\tMap<EMarkov,Map<EGender,MkChainAccessor>> mrkAcsMap,\r\n\t\t\t\t\tMNLParamAccessor mnlAcs,\r\n\t\t\t\t\tCensusODAccessor odAcs) {\r\n\t\tsuper(japan, mnlAcs, mrkAcsMap);\r\n\t\tthis.odAcs = odAcs;\r\n\t}\r\n\t\r\n\tprivate class ActivityTask implements Callable<Integer> {\r\n\t\tprivate final int id;\r\n\t\tprivate final List<HouseHold> households;\r\n\t\tprivate final Map<Integer, Integer> mapMotif;\r\n\t\tprivate int error;\r\n\t\tprivate int total;\r\n\r\n\t\tpublic ActivityTask(int id, List<HouseHold> households,\r\n\t\t\t\tMap<Integer, Integer> mapMotif){\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.households = households;\r\n\t\t\tthis.mapMotif = mapMotif;\r\n\t\t\tthis.total = error = 0;\r\n\t\t}\t\r\n\t\t\r\n\t\tprivate GLonLat choiceOffice(GLonLat home, EGender gender) {\r\n\t\t\tCity city = japan.getCity(home.getGcode());\r\n\t\t\tCensusOD censusOD = odAcs.get(EType.COMMUTER, city.getId());\r\n\t\t\tif (censusOD != null) {\r\n\t\t\t\tList<Double> capacities = censusOD.getCapacities(gender);\r\n\t\t\t\tif (!capacities.isEmpty()) {\r\n\t\t\t\t\tint choice = Roulette.choice(capacities, getRandom());\t\r\n\t\t\t\t\tboolean isHome = censusOD.isHome(choice);\r\n\t\t\t\t\tif (isHome) {\r\n\t\t\t\t\t\treturn home;\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\tString cityName = censusOD.getDestination(gender, choice);\r\n\t\t\t\t\t\tCity dcity = japan.getCity(cityName);\r\n\t\t\t\t\t\tif (dcity != null) {\r\n\t\t\t\t\t\t\tif (!city.getId().equals(dcity.getId())) {\r\n\t\t\t\t\t\t\t\treturn choiceDestination(dcity, ETransition.OFFICE, gender);\r\n\t\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t\treturn choiceDestination2(home, dcity, ETransition.OFFICE, gender);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tprivate ETransition freeTransitionFilter(ETransition transition) {\r\n\t\t\tif (\ttransition != ETransition.STAY && \r\n\t\t\t\t\ttransition != ETransition.HOME && \r\n\t\t\t\t\ttransition != ETransition.SHOPPING &&  \r\n\t\t\t\t\ttransition != ETransition.EATING &&  \r\n\t\t\t\t\ttransition != ETransition.HOSPITAL &&  \r\n\t\t\t\t\ttransition != ETransition.FREE && \r\n\t\t\t\t\ttransition != ETransition.BUSINESS) {\r\n\t\t\t\ttransition = ETransition.FREE;\r\n\t\t\t}\r\n\t\t\treturn transition;\r\n\t\t}\r\n\t\t\r\n\t\tprivate int createActivities(HouseHold household, Person person) {\r\n\t\t\tGLonLat home = new GLonLat(household.getHome(), household.getGcode());\r\n\t\t\tEGender gender = person.getGender();\r\n\t\t\r\n\t\t\t// Markov Accessor\r\n\t\t\tMkChainAccessor mkAcs = mrkAcsMap.get(EMarkov.LABOR).get(gender);\r\n\t\t\tboolean senior = person.getAge() >= 65;\r\n\t\t\t\r\n\t\t\t// first activity\r\n\t\t\tEPurpose prePurpose = EPurpose.HOME;\r\n\t\t\tActivity homeAct = new Activity(home, 0, 24*3600, EPurpose.HOME);\r\n\t\t\tperson.addAcitivity(homeAct);\r\n\t\t\t\r\n\t\t\t// second... activity\r\n\t\t\tGLonLat curloc = home;\r\n\t\t\tActivity preAct = homeAct;\r\n\t\t\tfor (int i = 3*3600; i < 3600*24; i += timeInterval) {\r\n\t\t\t\tETransition transition = null;\r\n\t\t\t\tList<Double> probs = mkAcs.getProbs(i, prePurpose);\r\n\r\n\t\t\t\tdouble randomValue = getRandom();\r\n\t\t\t\tint choice = Roulette.choice(probs, randomValue);\r\n\t\t\t\ttransition = mkAcs.getTransition(choice);\r\n\t\t\t\t\r\n\t\t\t\tEPurpose purpose = transition.getPurpose();\r\n\t\t\t\t\r\n\t\t\t\tif (transition != ETransition.STAY) {\r\n\t\t\t\t\t// choice destination\r\n\t\t\t\t\tif (transition == ETransition.HOME) {\r\n\t\t\t\t\t\tcurloc = home;\r\n\t\t\t\t\t}else if (transition == ETransition.OFFICE) {\r\n\t\t\t\t\t\tcurloc = person.hasOffice() ? person.getOffice() : choiceOffice(home, gender); \r\n\t\t\t\t\t\tperson.setOffice(curloc);\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\ttransition = freeTransitionFilter(transition);\r\n\t\t\t\t\t\tcurloc = choiceFreeDestination(curloc, transition, senior, gender, person.getLabor());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (curloc == null) {\r\n\t\t\t\t\t\tperson.getActivities().clear();\r\n\t\t\t\t\t\tperson.addAcitivity(homeAct);\r\n\t\t\t\t\t\treturn 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Create an activity\r\n\t\t\t\t\tpreAct = Commuter.createActivity(preAct, curloc, i, 3600*24, purpose);\r\n\t\t\t\t\tperson.getActivities().add(preAct);\r\n\t\t\t\t\t\r\n\t\t\t\t\tprePurpose = purpose;\r\n\t\t\t\t}\r\n\t\t\t}\r\n//\t\t\tif(person.getActivities().size()==1){\r\n//\t\t\t\tSystem.out.println(\"===================================================\");\r\n//\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tprivate void process(HouseHold household) {\r\n\t\t\tfor (Person person : household.getListPersons()) {\r\n\t\t\t\tint res = createActivities(household, person);\r\n\t\t\t\tif (res == 0) {\r\n\t\t\t\t\tint motif = setMotif(person);\r\n\t\t\t\t\tsynchronized(mapMotif) {\r\n\t\t\t\t\t\tint vol = mapMotif.getOrDefault(motif, 0);\r\n\t\t\t\t\t\tmapMotif.put(motif, vol + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else {\r\n\t\t\t\t\tthis.error++;\r\n\t\t\t\t}\r\n\t\t\t\tthis.total++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic Integer call() throws Exception {\r\n\t\t\ttry {\r\n\t\t\t\tfor (HouseHold household : households) {\r\n\t\t\t\t\tprocess(household);\t\t\r\n\t\t\t\t}\r\n\t\t\t}catch(Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"[%d]-%d-%d%n\",id, error, total);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\tprotected Callable<Integer> createTask(Map<Integer, Integer> mapMotif, int id, List<HouseHold> households){\r\n\t\treturn new ActivityTask(id, households, mapMotif);\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n        Country country = new Country();\r\n\r\n        System.out.println(\"start\");\r\n\r\n\t\tString inputDir = null;\r\n\t\tString root = null;\r\n\r\n\t\tInputStream inputStream = Commuter.class.getClassLoader().getResourceAsStream(\"config.properties\");\r\n\t\tif (inputStream == null) {\r\n\t\t\tthrow new FileNotFoundException(\"config.properties file not found in the classpath\");\r\n\t\t}\r\n\t\tProperties prop = new Properties();\r\n\t\tprop.load(inputStream);\r\n\r\n\t\troot = prop.getProperty(\"root\");\r\n\t\tinputDir = prop.getProperty(\"inputDir\");\r\n\t\tSystem.out.println(\"Root Directory: \" + root);\r\n\t\tSystem.out.println(\"Input Directory: \" + inputDir);\r\n\r\n        // load data\r\n        String stationFile = String.format(\"%sbase_station.csv\", inputDir);\r\n        Network station = DataAccessor.loadLocationData(stationFile);\r\n        country.setStation(station);\r\n\r\n        String cityFile = String.format(\"%scity_boundary.csv\", inputDir);\r\n        DataAccessor.loadCityData(cityFile, country);\r\n\r\n        String censusFile = String.format(\"%scity_census_od.csv\", inputDir);\r\n        CensusODAccessor odAcs = new CensusODAccessor(censusFile, country);\r\n\r\n        String hospitalFile = String.format(\"%scity_hospital.csv\", inputDir);\r\n        DataAccessor.loadHospitalData(hospitalFile, country);\r\n\r\n\t\tString restaurantFile = String.format(\"%scity_restaurant.csv\", inputDir);\r\n\t\tDataAccessor.loadRestaurantData(restaurantFile, country);\r\n\r\n\t\tString retailFile = String.format(\"%scity_retail.csv\", inputDir);\r\n\t\tDataAccessor.loadRetailData(retailFile, country);\r\n\r\n        String meshFile = String.format(\"%smesh_ecensus.csv\", inputDir);\r\n        DataAccessor.loadEconomicCensus(meshFile, country);\r\n\r\n        // load data after economic census\r\n        String tatemonFile = String.format(\"%scity_tatemono.csv\", inputDir);\r\n        DataAccessor.loadZenrinTatemono(tatemonFile, country, 1);\r\n\r\n        // load MNL parmaters\r\n        String mnlFile = String.format(\"%s/mnl/labor_params.csv\", inputDir);\r\n        MNLParamAccessor mnlAcs = new MNLParamAccessor();\r\n        mnlAcs.add(mnlFile, ELabor.WORKER);\r\n\r\n        int mfactor = 1;\r\n\r\n        // create activities\r\n\r\n        String outputDir = String.format(\"%s/activity/\", root);\r\n\r\n        long starttime = System.currentTimeMillis();\r\n        int start = 13;\r\n        for (int i = start; i <= 13; i++) {\r\n\r\n\t\t\t// load markov chains\r\n\t\t\tMap<EMarkov, Map<EGender, MkChainAccessor>> mrkMap = new HashMap<>();\r\n\t\t\t{\r\n\t\t\t\tString key = \"pref.\" + i;\r\n\t\t\t\tString relativePath = prop.getProperty(key);\r\n\t\t\t\tString maleFile = inputDir+ relativePath + \"_trip_labor_male_prob.csv\";\r\n\t\t\t\tString femaleFile = inputDir+ relativePath + \"_trip_labor_female_prob.csv\";\r\n\t\t\t\tMap<EGender, MkChainAccessor> map = new HashMap<>();\r\n\t\t\t\tmap.put(EGender.MALE, new MkChainAccessor(maleFile));\r\n\t\t\t\tmap.put(EGender.FEMALE, new MkChainAccessor(femaleFile));\r\n\t\t\t\tmrkMap.put(EMarkov.LABOR, map);\r\n\t\t\t}\r\n\t\t\tCommuter worker = new Commuter(country, mrkMap, mnlAcs, odAcs);\r\n\r\n            // create directory\r\n            File prefDir = new File(outputDir, String.valueOf(i));\r\n            System.out.println(\"Start prefecture:\" + i + prefDir.mkdirs());\r\n            File householdDir = new File(String.format(\"%s/agent/\", root), String.valueOf(i));\r\n            // String householdDir = String.format(\"%s/agent/\", root);\r\n\r\n            for (File file : householdDir.listFiles()) {\r\n                if (file.getName().contains(\".csv\")) {\r\n                    List<HouseHold> households = PersonAccessor.load(file.getAbsolutePath(), new ELabor[]{ELabor.WORKER}, mfactor);\r\n                    System.out.println(file.getName() + \" \" + households.size());\r\n                    worker.assign(households);\r\n                    String resultName = String.format(\"%s%s%s%s_labor.csv\", outputDir, i, \"/\", file.getName().replaceAll(\".csv\", \"\"));\r\n                    PersonAccessor.writeActivities(resultName, households);\r\n                }\r\n            }\r\n            System.out.println(\"end\");\r\n            long endtime = System.currentTimeMillis();\r\n\t\t\tSystem.out.println(worker.mapMotif);\r\n            System.out.println(endtime - starttime);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/gen/Commuter.java b/src/pseudo/gen/Commuter.java
--- a/src/pseudo/gen/Commuter.java	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/pseudo/gen/Commuter.java	(date 1734079919333)
@@ -189,6 +189,7 @@
 
         System.out.println("start");
 
+		String output = null;
 		String inputDir = null;
 		String root = null;
 
@@ -201,6 +202,7 @@
 
 		root = prop.getProperty("root");
 		inputDir = prop.getProperty("inputDir");
+		output = prop.getProperty("outputDir");
 		System.out.println("Root Directory: " + root);
 		System.out.println("Input Directory: " + inputDir);
 
@@ -240,11 +242,11 @@
 
         // create activities
 
-        String outputDir = String.format("%s/activity/", root);
+        String outputDir = String.format("%s/activity/", output);
 
         long starttime = System.currentTimeMillis();
-        int start = 13;
-        for (int i = start; i <= 13; i++) {
+        int start = 1;
+        for (int i = start; i <= 47; i++) {
 
 			// load markov chains
 			Map<EMarkov, Map<EGender, MkChainAccessor>> mrkMap = new HashMap<>();
Index: src/pseudo/aggr/LinkVolumeCalculator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pseudo.aggr;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport pseudo.res.ETransport;\r\n\r\npublic class LinkVolumeCalculator {\r\n\r\n\tprivate static final long TIME_INTERVAL_SECONDS = 3600 *1000;\r\n\r\n\tprivate static void calcurate(String filename, Map<String, Map<Long,Integer>> data) {\r\n\t\tSystem.out.println(filename);\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(filename));){\r\n            String line;\r\n            while ((line = br.readLine()) != null) {\t\r\n            \tString[] items = line.split(\",\", -1);\r\n            \tlong time = Long.valueOf(items[1]) / TIME_INTERVAL_SECONDS;\r\n            \tETransport transport = ETransport.getType(Integer.valueOf(items[5]));\r\n            \tString link = String.valueOf(items[8]);\r\n            \tif (link.equals(\"\") !=true && transport != ETransport.TRAIN) {\r\n            \t\tMap<Long,Integer> vols = data.containsKey(link) ? data.get(link) : new HashMap<>();\r\n            \t\tint volume = vols.containsKey(time) ? vols.get(time) : 0;\r\n            \t\tvols.put(time, volume+1);\r\n            \t\tdata.put(link, vols);\r\n            \t}\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\t}\r\n\r\n\tpublic static void write(String filename, Map<String, Map<Long,Integer>> data) {\r\n\t\tlong numSteps = (3600*24*1000)/ TIME_INTERVAL_SECONDS;\r\n\t\ttry(BufferedWriter bw = new BufferedWriter(new FileWriter(filename));){\r\n\t\t\tfor (Map.Entry<String, Map<Long,Integer>> e : data.entrySet()) {\r\n\t\t\t\tMap<Long,Integer> vols = e.getValue();\r\n\t\t\t\tString line = String.format(\"%s\", e.getKey());\r\n\t\t\t\tfor (long i = 0; i < numSteps; i++) {\r\n\t\t\t\t\tint vol = vols.containsKey(i) ? vols.get(i) : 0;\r\n\t\t\t\t\tline = String.format(\"%s,%d\", line, vol);\r\n\t\t\t\t}\r\n\t\t\t\tbw.write(line);\r\n\t\t\t\tbw.newLine();\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tString input = \"/home/ubuntu/Data/pseudo/trajectory/city/\"; //args[0];\r\n\t\tString output = \"/home/ubuntu/Data/pseudo/link_volume.csv\";//args[1];\r\n\t\tint start = 1;//Integer.valueOf(args[2]);\r\n\t\tint end = 47;//Integer.valueOf(args[3]);\r\n\t\t\r\n\t\tMap<String, Map<Long,Integer>> data = new HashMap<>();\r\n\t\tFile[] files = (new File(input)).listFiles();\r\n\t\tint count = 0;\r\n\t\tfor (File file : files){\r\n\t\t\tint pref = Integer.valueOf(file.getName().substring(7, 9));\r\n\t\t\tSystem.out.println(String.format(\"%d %d\", count++, files.length));\r\n\t\t\tif (pref >= start && pref <= end) {\r\n\t\t\t\tcalcurate(file.getAbsolutePath(), data);\r\n\t\t\t}\r\n\t\t}\r\n\t\twrite(output, data);\r\n\t\tSystem.out.println(\"end\");\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/aggr/LinkVolumeCalculator.java b/src/pseudo/aggr/LinkVolumeCalculator.java
--- a/src/pseudo/aggr/LinkVolumeCalculator.java	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/pseudo/aggr/LinkVolumeCalculator.java	(date 1734000144685)
@@ -14,16 +14,17 @@
 
 	private static final long TIME_INTERVAL_SECONDS = 3600 *1000;
 
-	private static void calcurate(String filename, Map<String, Map<Long,Integer>> data) {
+	private static void calculate(String filename, Map<String, Map<Long,Integer>> data) {
 		System.out.println(filename);
+		long startday = 1443625200000L;
 		try (BufferedReader br = new BufferedReader(new FileReader(filename));){
             String line;
             while ((line = br.readLine()) != null) {	
             	String[] items = line.split(",", -1);
-            	long time = Long.valueOf(items[1]) / TIME_INTERVAL_SECONDS;
+            	long time = (Long.valueOf(items[1]) - startday) / TIME_INTERVAL_SECONDS;
             	ETransport transport = ETransport.getType(Integer.valueOf(items[5]));
             	String link = String.valueOf(items[8]);
-            	if (link.equals("") !=true && transport != ETransport.TRAIN) {
+            	if (link.equals("") !=true && transport != ETransport.TRAIN && transport != ETransport.WALK) {
             		Map<Long,Integer> vols = data.containsKey(link) ? data.get(link) : new HashMap<>();
             		int volume = vols.containsKey(time) ? vols.get(time) : 0;
             		vols.put(time, volume+1);
@@ -54,20 +55,23 @@
 	}
 	
 	public static void main(String[] args) {
-		String input = "/home/ubuntu/Data/pseudo/trajectory/city/"; //args[0];
-		String output = "/home/ubuntu/Data/pseudo/link_volume.csv";//args[1];
-		int start = 1;//Integer.valueOf(args[2]);
-		int end = 47;//Integer.valueOf(args[3]);
-		
+		String output = "/mnt/free/owner/link_volume_22_multiple_pref_all_mode.csv";//args[1];
+		int start = 13;//Integer.valueOf(args[2]);
+		int end = 23;//Integer.valueOf(args[3]);
+
 		Map<String, Map<Long,Integer>> data = new HashMap<>();
-		File[] files = (new File(input)).listFiles();
-		int count = 0;
-		for (File file : files){
-			int pref = Integer.valueOf(file.getName().substring(7, 9));
-			System.out.println(String.format("%d %d", count++, files.length));
-			if (pref >= start && pref <= end) {
-				calcurate(file.getAbsolutePath(), data);
+		for(int i=start; i<=end;i++){
+
+			String input = String.format("/mnt/large/data/PseudoPFLOW/ver2.0/trajectory/%02d/", i);
+//			Map<String, Map<Long,Integer>> data = new HashMap<>();
+
+			File[] files = (new File(input)).listFiles();
+			int count = 0;
+			for (File file : files){
+				System.out.println(String.format("%d %d", count++, files.length));
+				calculate(file.getAbsolutePath(), data);
 			}
+			// write(output, data);
 		}
 		write(output, data);
 		System.out.println("end");
Index: src/pseudo/gen/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pseudo.gen;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.*;\r\nimport java.util.concurrent.Callable;\r\n\r\nimport jp.ac.ut.csis.pflow.routing4.res.Network;\r\nimport jp.ac.ut.csis.pflow.routing4.res.Node;\r\nimport pseudo.acs.CensusODAccessor;\r\nimport pseudo.acs.DataAccessor;\r\nimport pseudo.acs.MNLParamAccessor;\r\nimport pseudo.acs.MkChainAccessor;\r\nimport pseudo.acs.PersonAccessor;\r\nimport pseudo.acs.SchoolRefAccessor;\r\nimport pseudo.acs.CensusODAccessor.EType;\r\nimport pseudo.res.Activity;\r\nimport pseudo.res.CensusOD;\r\nimport pseudo.res.City;\r\nimport pseudo.res.EGender;\r\nimport pseudo.res.ELabor;\r\nimport pseudo.res.EMarkov;\r\nimport pseudo.res.EPurpose;\r\nimport pseudo.res.ETransition;\r\nimport pseudo.res.Facility;\r\nimport pseudo.res.HouseHold;\r\nimport pseudo.res.Country;\r\nimport pseudo.res.GLonLat;\r\nimport pseudo.res.Person;\r\nimport utils.Roulette;\r\n\r\npublic class Student extends ActGenerator {\r\n\r\n\tprivate CensusODAccessor odAcs;\r\n\tprivate SchoolRefAccessor schRefAcs;\r\n\tprivate static final double SCHOOL_MAX_DISTANCE = 5000;\r\n\t\r\n\tpublic Student(Country japan,\r\n\t\t\t\t   Map<EMarkov,Map<EGender,MkChainAccessor>> mrkAcsMap,\r\n\t\t\t\t   MNLParamAccessor mnlAcs,\r\n\t\t\t\t   CensusODAccessor odAcs,\r\n\t\t\t\t   SchoolRefAccessor schRefAcs) {\r\n\t\tsuper(japan, mnlAcs,mrkAcsMap);\r\n\t\t\r\n\t\tthis.odAcs = odAcs;\r\n\t\tthis.schRefAcs = schRefAcs;\r\n\t}\r\n\t\r\n\tprivate class ActivityTask implements Callable<Integer> {\r\n\t\tprivate int id;\r\n\t\tprivate List<HouseHold> households;\r\n\t\tprivate Map<Integer, Integer> mapMotif;\r\n\t\tprivate int error;\r\n\t\tprivate int total;\r\n\r\n\t\tpublic ActivityTask(int id, List<HouseHold> households,\r\n\t\t\t\tMap<Integer, Integer> mapMotif){\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.households = households;\r\n\t\t\tthis.mapMotif = mapMotif;\r\n\t\t\tthis.total = error = 0;\r\n\t\t}\t\r\n\t\t\r\n\t\t\r\n\t\tprivate EMarkov getTypeMarkov(ELabor labor) {\r\n\t\t\tswitch (labor) {\r\n\t\t\tcase PRE_SCHOOL: \r\n\t\t\tcase PRIMARY_SCHOOL: \r\n\t\t\tcase SECONDARY_SCHOOL:\r\n\t\t\t\treturn EMarkov.STUDENT1;\r\n\t\t\tcase HIGH_SCHOOL:\r\n\t\t\tcase JUNIOR_COLLEGE:\r\n\t\t\tcase COLLEGE:\r\n\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\treturn EMarkov.STUDENT2;\r\n\t\t}\r\n\t\t\r\n\t\tprivate List<String> choiceCityWithSchools(ELabor labor, Set<String> names){\r\n\t\t\tList<String> res = new ArrayList<>();\r\n\t\t\tfor (String e : names) {\r\n\t\t\t\tCity city = japan.getCity(e);\r\n\t\t\t\tif (city != null) {\r\n\t\t\t\t\tList<Facility> schools = city.getSchools(labor);\r\n\t\t\t\t\tif (schools != null && schools.size() > 0) {\r\n\t\t\t\t\t\tres.add(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t}\r\n\t\t\r\n\t\tprivate ETransition freeTransitionFilter(ETransition transition) {\r\n\t\t\tif (\ttransition != ETransition.STAY && \r\n\t\t\t\t\ttransition != ETransition.HOME && \r\n\t\t\t\t\ttransition != ETransition.SHOPPING &&  \r\n\t\t\t\t\ttransition != ETransition.EATING &&  \r\n\t\t\t\t\ttransition != ETransition.HOSPITAL &&  \r\n\t\t\t\t\ttransition != ETransition.FREE) {\r\n\t\t\t\ttransition = ETransition.FREE;\r\n\t\t\t}\r\n\t\t\treturn transition;\r\n\t\t}\r\n\t\t\r\n\t\tprivate GLonLat choiceSchool(GLonLat gloc, Person person) {\r\n\t\t\tCity city = japan.getCity(gloc.getGcode());\t\r\n\t\t\tELabor labor = person.getLabor();\r\n\t\t\tif (city != null) {\r\n\t\t\t\tif (labor == ELabor.PRE_SCHOOL) {\r\n\t\t\t\t\tList<Facility> schools = city.getSchools(labor);\r\n\t\t\t\t\tif (schools != null && schools.size() > 0) {\r\n\t\t\t\t\t\tint choice = (int)(getRandom()*schools.size());\r\n\t\t\t\t\t\treturn schools.get(choice);\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t}else if (labor == ELabor.PRIMARY_SCHOOL) {\r\n\t\t\t\t\tHouseHold household = person.getParent();\r\n\t\t\t\t\treturn (household.getPrimarySchool());\r\n\t\t\t\t\r\n\t\t\t\t}else if (labor == ELabor.SECONDARY_SCHOOL) {\r\n\t\t\t\t\tHouseHold household = person.getParent();\r\n\t\t\t\t\treturn (household.getSecondarySchool());\r\n\t\t\t\t\t\r\n\t\t\t\t}else {\r\n\t\t\t\t\tCensusOD censusOD = odAcs.get(EType.STUDENT, city.getId());\r\n\t\t\t\t\tif (censusOD != null) {\r\n\t\t\t\t\t\tEGender gender = person.getGender();\r\n\t\t\t\t\t\tSet<String> names = censusOD.getDestinationNames(gender);\r\n\t\t\t\t\t\tList<String> selectedNames = choiceCityWithSchools(labor, names);\r\n\t\t\t\t\t\tList<Double> capacities = censusOD.getCapacities(gender, selectedNames);\r\n\t\t\t\t\t\tif (capacities.size() > 0) {\r\n\t\t\t\t\t\t\tCity dcity = null;\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tint choice = Roulette.choice(capacities, getRandom());\r\n\t\t\t\t\t\t\t\tString cityName = selectedNames.get(choice);\r\n\t\t\t\t\t\t\t\tdcity = japan.getCity(cityName);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (dcity != null) {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tList<Facility> schools = dcity.getSchools(labor);\r\n\t\t\t\t\t\t\t\tint choice = (int) (getRandom() * schools.size());\r\n\t\t\t\t\t\t\t\treturn schools.get(choice);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\t\r\n\t\tprivate int createActivity(HouseHold household, Person person) {\r\n\t\t\tGLonLat home = new GLonLat(household.getHome(), household.getGcode());\r\n\t\t\tEGender fixedGender = EGender.MALE;\t// Fixed value\r\n\t\t\tEGender gender = person.getGender();\r\n\t\t\r\n\t\t\tif (person.getId() == 352750) {\r\n\t\t\t\tSystem.out.println(\"aa\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Markov Accessor\r\n\t\t\tELabor labor = person.getLabor();\r\n\t\t\tEMarkov type = getTypeMarkov(labor);\r\n\t\t\tMkChainAccessor mkAcs = mrkAcsMap.get(type).get(fixedGender);\r\n\t\t\t\r\n\t\t\t// first activity\r\n\t\t\tEPurpose prePurpose = EPurpose.HOME;\r\n\t\t\tActivity homeAct = new Activity(home, 0, 24*3600, EPurpose.HOME);\r\n\t\t\tperson.addAcitivity(homeAct);\r\n\t\t\t\r\n\t\t\t// second... activity\r\n\t\t\tGLonLat curloc = home;\r\n\t\t\tActivity preAct = homeAct;\r\n\t\t\tfor (int i = 3*3600; i < 3600*24; i += timeInterval) {\r\n\t\t\t\tETransition transition = null;\r\n\t\t\t\tList<Double> probs = mkAcs.getProbs(i, prePurpose);\r\n\r\n\t\t\t\tdouble randomValue = getRandom();\r\n\t\t\t\tint choice = Roulette.choice(probs, randomValue);\r\n\t\t\t\ttransition = mkAcs.getTransition(choice);\r\n\t\t\t\tEPurpose purpose = transition.getPurpose();\r\n\t\t\t\t\r\n\t\t\t\tif (transition != ETransition.STAY) {\r\n\t\t\t\t\tif (transition == ETransition.HOME) {\r\n\t\t\t\t\t\tcurloc = home;\r\n\t\t\t\t\t}else if (transition == ETransition.SCHOOL) {\r\n\t\t\t\t\t\tcurloc = person.hasOffice() ? person.getOffice() : choiceSchool(curloc, person); \r\n\t\t\t\t\t\tperson.setOffice(curloc);\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\ttransition = freeTransitionFilter(transition);\r\n\t\t\t\t\t\tcurloc = choiceFreeDestination(curloc, transition, true, gender, person.getLabor());\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (curloc == null) {\r\n\t\t\t\t\t\tperson.getActivities().clear();\r\n\t\t\t\t\t\tperson.addAcitivity(homeAct);\r\n\t\t\t\t\t\treturn 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Create an activity\r\n\t\t\t\t\tpreAct = Student.createActivity(preAct, curloc, i, 3600*24, purpose);\r\n\t\t\t\t\tperson.getActivities().add(preAct);\r\n\t\t\t\t\t\r\n\t\t\t\t\tprePurpose = purpose;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\t\t\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tprivate void process(HouseHold household) {\r\n\t\t\tfor (Person person : household.getListPersons()) {\r\n\t\t\t\tint res = createActivity(household, person);\r\n\t\t\t\tif (res == 0) {\r\n\t\t\t\t\tint motif = setMotif(person);\r\n\t\t\t\t\tsynchronized(mapMotif) {\r\n\t\t\t\t\t\tint vol = mapMotif.containsKey(motif) ? mapMotif.get(motif) : 0;\r\n\t\t\t\t\t\tmapMotif.put(motif, vol + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else {\r\n\t\t\t\t\tthis.error++;\r\n\t\t\t\t}\r\n\t\t\t\tthis.total++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate void assignSchool(HouseHold household) {\r\n\t\t\tString householdid = household.getId();\r\n\t\t\tELabor[] types = {ELabor.PRIMARY_SCHOOL, ELabor.SECONDARY_SCHOOL};\r\n\t\t\tGLonLat home = household.getHome();\r\n\t\t\tString gcode = household.getGcode();\r\n\t\t\tCity city = japan.getCity(gcode);\r\n\t\t\tfor (ELabor labor : types) {\r\n\t\t\t\tGLonLat school = schRefAcs.getId(labor, householdid);\r\n\t\t\t\tif (school != null) {\r\n\t\t\t\t\thousehold.setSchool(labor, school);\r\n\t\t\t\t}else {\r\n\t\t\t\t\tList<Facility> facs = city.getSchools(labor);\r\n\t\t\t\t\tif (facs != null) {\r\n\t\t\t\t\t\tNetwork network = new Network();\r\n\t\t\t\t\t\tfor (Facility f : facs) {\r\n\t\t\t\t\t\t\tnetwork.addNode(new Node(String.valueOf(f.getId()), f.getLon(), f.getLat()));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tNode node = routing.getNearestNode(network, home.getLon(), home.getLat(), SCHOOL_MAX_DISTANCE);\r\n\t\t\t\t\t\tif (node != null) {\r\n\t\t\t\t\t\t\tschool = new GLonLat(node.getLon(), node.getLat(), gcode);\r\n\t\t\t\t\t\t\thousehold.setSchool(labor, school);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic Integer call() throws Exception {\r\n\t\t\ttry {\r\n\t\t\t\tfor (HouseHold household : households) {\r\n\t\t\t\t\tif (household.getListPersons().size() > 0) {\r\n\t\t\t\t\t\tassignSchool(household);\r\n\t\t\t\t\t\tprocess(household);\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}catch(Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tSystem.out.println(String.format(\"[%d] error:%d total:%d\",id, error, total));\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\t\t\r\n\tprotected Callable<Integer> createTask(Map<Integer, Integer> mapMotif, int id, List<HouseHold> households){\r\n\t\treturn new ActivityTask(id, households, mapMotif);\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t\r\n\t\tCountry japan = new Country();\r\n\t\t\r\n\t\tSystem.out.println(\"start\");\r\n\r\n\t\tString inputDir = null;\r\n\t\tString root = null;\r\n\r\n\t\tInputStream inputStream = Commuter.class.getClassLoader().getResourceAsStream(\"config.properties\");\r\n\t\tif (inputStream == null) {\r\n\t\t\tthrow new FileNotFoundException(\"config.properties file not found in the classpath\");\r\n\t\t}\r\n\t\tProperties prop = new Properties();\r\n\t\tprop.load(inputStream);\r\n\r\n\t\troot = prop.getProperty(\"root\");\r\n\t\tinputDir = prop.getProperty(\"inputDir\");\r\n\t\tSystem.out.println(\"Root Directory: \" + root);\r\n\t\tSystem.out.println(\"Input Directory: \" + inputDir);\r\n\t\t\r\n\t\t// load data\r\n\t\tString stationFile = String.format(\"%sbase_station.csv\", inputDir);\r\n\t\tNetwork station = DataAccessor.loadLocationData(stationFile);\r\n\t\tjapan.setStation(station);\r\n\t\t\r\n\t\tString cityFile = String.format(\"%scity_boundary.csv\", inputDir);\r\n\t\tDataAccessor.loadCityData(cityFile, japan);\r\n\t\t\r\n\t\tString censusFile = String.format(\"%scity_census_od.csv\", inputDir);\r\n\t\tCensusODAccessor odAcs = new CensusODAccessor(censusFile, japan);\r\n\t\t\r\n\t\tString hospitalFile = String.format(\"%scity_hospital.csv\", inputDir);\r\n\t\tDataAccessor.loadHospitalData(hospitalFile, japan);\r\n\t\t\t\t\r\n\t\tString preschoolFile = String.format(\"%scity_pre_school.csv\", inputDir);\r\n\t\tDataAccessor.loadPreSchoolData(preschoolFile, japan);\r\n\t\t\r\n\t\tString schoolFile = String.format(\"%scity_school.csv\", inputDir);\r\n\t\tDataAccessor.loadSchoolData(schoolFile, japan);\r\n\t\t\t\t\r\n\t\tString meshFile = String.format(\"%smesh_ecensus.csv\", inputDir);\r\n\t\tDataAccessor.loadEconomicCensus(meshFile, japan);\r\n\r\n\t\t// load data after ecensus\r\n\t\tString tatemonFile = String.format(\"%scity_tatemono.csv\", inputDir);\r\n\t\tDataAccessor.loadZenrinTatemono(tatemonFile, japan, 1);\r\n\r\n\t\t\r\n\t\t// load MNL parmaeters\r\n\t\tMNLParamAccessor mnlAcs = new MNLParamAccessor();\r\n\t\tString mnlFile1 = String.format(\"%s/mnl/student1_params.csv\", inputDir);\r\n\t\tmnlAcs.add(mnlFile1, ELabor.PRE_SCHOOL);\r\n\t\tmnlAcs.add(mnlFile1, ELabor.PRIMARY_SCHOOL); \r\n\t\tmnlAcs.add(mnlFile1, ELabor.SECONDARY_SCHOOL);\r\n\t\t\r\n\t\tString mnlFile2 = String.format(\"%s/mnl/student2_params.csv\", inputDir);\r\n\t\tmnlAcs.add(mnlFile2, ELabor.HIGH_SCHOOL);\r\n\t\tmnlAcs.add(mnlFile2, ELabor.JUNIOR_COLLEGE);\r\n\t\tmnlAcs.add(mnlFile2, ELabor.COLLEGE);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\r\n\t\t// prepare an accessor for school\r\n\t\tSchoolRefAccessor schAcs = new SchoolRefAccessor();\r\n\t\t\r\n\t\tint mfactor = 1;\r\n\t\tString prePref = \"\";\r\n\t\t\r\n\t\t// create activities\r\n\r\n\t\tString outputDir = String.format(\"%s/activity/\", root);\r\n\r\n\t\tint start = 13;\r\n\t\tfor (int i = start; i <= 13; i++) {\r\n\t\t\t// create directory\r\n\t\t\tFile prefDir = new File(outputDir, String.valueOf(i));\r\n\t\t\tSystem.out.println(\"Start prefecture:\" + i + prefDir.mkdirs());\r\n\t\t\tFile householdDir = new File(String.format(\"%s/agent/\", root), String.valueOf(i));\r\n\t\t\t// String householdDir = String.format(\"%s/agent/\", root);\r\n\r\n\t\t\t// load markov data\r\n\t\t\tMap<EMarkov,Map<EGender,MkChainAccessor>> mrkMap = new HashMap<>();\r\n\t\t\t{\r\n\t\t\t\tString key = \"pref.\" + i;\r\n\t\t\t\tString relativePath = prop.getProperty(key);\r\n\t\t\t\tString maleFile = inputDir+ relativePath + \"_trip_student1_prob.csv\";\r\n\t\t\t\tMap<EGender, MkChainAccessor> map = new HashMap<>();\r\n\t\t\t\tmap.put(EGender.MALE, new MkChainAccessor(maleFile));\r\n\t\t\t\tmrkMap.put(EMarkov.STUDENT1, map);\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\tString key = \"pref.\" + i;\r\n\t\t\t\tString relativePath = prop.getProperty(key);\r\n\t\t\t\tString maleFile = inputDir+ relativePath + \"_trip_student2_prob.csv\";\r\n\t\t\t\tMap<EGender, MkChainAccessor> map = new HashMap<>();\r\n\t\t\t\tmap.put(EGender.MALE, new MkChainAccessor(maleFile));\r\n\t\t\t\tmrkMap.put(EMarkov.STUDENT2, map);\r\n\t\t\t}\r\n\t\t\tStudent worker = new Student(japan, mrkMap, mnlAcs, odAcs, schAcs);\r\n\r\n\t\t\tfor (File file : householdDir.listFiles()) {\r\n\t\t\t\tif (file.getName().contains(\".csv\")) {\r\n\t\t\t\t\tString name = file.getName();\r\n\t\t\t\t\tString pref = name.substring(7, 9);\r\n\r\n\t\t\t\t\t//　load school data\r\n\t\t\t\t\tif (!prePref.equals(pref)) {\r\n\t\t\t\t\t\tschAcs.load(String.format(\"%sschool/primary_%s.csv\", inputDir, pref), ELabor.PRIMARY_SCHOOL);\r\n\t\t\t\t\t\tschAcs.load(String.format(\"%sschool/secondary_%s.csv\", inputDir, pref), ELabor.SECONDARY_SCHOOL);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (file.getName().contains(\".csv\")) {\r\n\r\n\t\t\t\t\t\t// load household\r\n\t\t\t\t\t\tList<HouseHold> households = PersonAccessor.load(file.getAbsolutePath(), new ELabor[]{\r\n\t\t\t\t\t\t\t\tELabor.PRE_SCHOOL,\r\n\t\t\t\t\t\t\t\tELabor.PRIMARY_SCHOOL,\r\n\t\t\t\t\t\t\t\tELabor.SECONDARY_SCHOOL,\r\n\t\t\t\t\t\t\t\tELabor.HIGH_SCHOOL,\r\n\t\t\t\t\t\t\t\tELabor.JUNIOR_COLLEGE, ELabor.COLLEGE}, mfactor);\r\n\t\t\t\t\t\tSystem.out.println(file.getName() + \" \" + households.size());\r\n\t\t\t\t\t\tworker.assign(households);\r\n\t\t\t\t\t\tString resultName = String.format(\"%s%s%s%s_student.csv\", outputDir, i, \"/\", file.getName().replaceAll(\".csv\", \"\"));\r\n\t\t\t\t\t\tPersonAccessor.writeActivities(resultName, households);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"end\");\r\n\t\t\tlong endtime = System.currentTimeMillis();\r\n\t\t\tSystem.out.println(worker.mapMotif);\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/gen/Student.java b/src/pseudo/gen/Student.java
--- a/src/pseudo/gen/Student.java	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/pseudo/gen/Student.java	(date 1734322833393)
@@ -153,11 +153,7 @@
 			GLonLat home = new GLonLat(household.getHome(), household.getGcode());
 			EGender fixedGender = EGender.MALE;	// Fixed value
 			EGender gender = person.getGender();
-		
-			if (person.getId() == 352750) {
-				System.out.println("aa");
-			}
-			
+
 			// Markov Accessor
 			ELabor labor = person.getLabor();
 			EMarkov type = getTypeMarkov(labor);
@@ -278,6 +274,7 @@
 		System.out.println("start");
 
 		String inputDir = null;
+		String output = null;
 		String root = null;
 
 		InputStream inputStream = Commuter.class.getClassLoader().getResourceAsStream("config.properties");
@@ -288,6 +285,7 @@
 		prop.load(inputStream);
 
 		root = prop.getProperty("root");
+		output = prop.getProperty("outputDir");
 		inputDir = prop.getProperty("inputDir");
 		System.out.println("Root Directory: " + root);
 		System.out.println("Input Directory: " + inputDir);
@@ -341,10 +339,10 @@
 		
 		// create activities
 
-		String outputDir = String.format("%s/activity/", root);
+		String outputDir = String.format("%s/activity/", output);
 
-		int start = 13;
-		for (int i = start; i <= 13; i++) {
+		int start = 1;
+		for (int i = start; i <= 47; i++) {
 			// create directory
 			File prefDir = new File(outputDir, String.valueOf(i));
 			System.out.println("Start prefecture:" + i + prefDir.mkdirs());
Index: src/pseudo/aggr/MeshVolumeCalculator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pseudo.aggr;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport jp.ac.ut.csis.pflow.geom2.Mesh;\r\nimport jp.ac.ut.csis.pflow.geom2.MeshUtils;\r\n\r\npublic class MeshVolumeCalculator {\r\n\r\n\tprivate static final long TIME_INTERVAL_SECONDS = 360 * 1000;\r\n\t\r\n\t// 改修中\r\n\tprivate static void calcurate(String filename, Map<String, List<Integer>> data) {\r\n\t\tSystem.out.println(filename);\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(filename));){\r\n            String line;\r\n            int preid = 0, prestep = 0;\r\n            int maxSteps = (int) (3600*24*1000 / TIME_INTERVAL_SECONDS);\r\n            List<Integer> vals = null, prevals = null;\r\n            while ((line = br.readLine()) != null) {\t\r\n            \tString[] items = line.split(\",\");\r\n            \tint id = Integer.valueOf(items[0]);\r\n            \tint step = (int)(Long.valueOf(items[1]) / TIME_INTERVAL_SECONDS);\r\n            \tdouble lon = Double.valueOf(items[3]);\r\n            \tdouble lat = Double.valueOf(items[4]);\r\n            \t\r\n            \t// create a list\r\n            \tMesh mesh = MeshUtils.createMesh(4, lon, lat);\r\n            \tString code = mesh.getCode();\r\n            \tif (data.containsKey(code)){\r\n            \t\tvals = data.get(code);\r\n            \t}else {\r\n            \t\tvals = new ArrayList<>();\r\n            \t\tfor (int i = 0; i < maxSteps; i++) {\r\n            \t\t\tvals.add(0);\r\n            \t\t}\r\n            \t\tdata.put(code, vals);\r\n            \t}\r\n            \r\n            \t// set value to list\r\n            \tif (preid != id) {\r\n            \t\t// 0 ~ time\r\n                \tfor (int i = 0; i <= step && i < maxSteps; i++) {\r\n                \t\tvals.set(i, vals.get(i)+1);\r\n                \t}\r\n                \t// time ~ max \r\n                \tif (prevals != null) {\r\n                \t\tfor (int i = prestep; i < maxSteps; i++) {\r\n                \t\t\tprevals.set(i, prevals.get(i)+1);\r\n\t                \t}\r\n\t\t\t\t\t\t// data.put(code, prevals);\r\n                \t}\r\n            \t}else {\r\n            \t\tfor (int i = prestep+1; i <= step && i < maxSteps; i++) {\r\n                \t\tvals.set(i, vals.get(i)+1);\r\n                \t}\r\n            \t}\r\n           \r\n            \tpreid = id;\r\n            \tprestep = step;\r\n            \tprevals = vals;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\t}\r\n\t\r\n\t\r\n\tpublic static void write(String filename, Map<String, List<Integer>> data) {\r\n\t\ttry(BufferedWriter bw = new BufferedWriter(new FileWriter(filename));){\r\n\t\t\tfor (Map.Entry<String, List<Integer>> e : data.entrySet()) {\r\n\t\t\t\tList<Integer> vols = e.getValue();\r\n\t\t\t\tString line = String.format(\"%s\", e.getKey());\r\n\t\t\t\tfor (int i = 0; i < vols.size(); i++) {\r\n\t\t\t\t\tint vol = vols.get(i);\r\n\t\t\t\t\tline = String.format(\"%s,%d\", line, vol);\r\n\t\t\t\t}\r\n\t\t\t\tbw.write(line);\r\n\t\t\t\tbw.newLine();\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tString input = \"/home/ubuntu/Data/pseudo/trajectory/city/\";\r\n\t\tString output = \"/home/ubuntu/Data/pseudo/mesh_volume.csv\";\r\n\t\tint start = 1;\r\n\t\tint end = 47;\r\n\t\t\r\n\t\tMap<String, List<Integer>> data = new HashMap<>();\r\n\t\tFile[] files = (new File(input)).listFiles();\r\n\t\tArrays.sort(files);\r\n\t\t\r\n\t\tint count = 0;\r\n\t\tfor (File file : files) {\r\n\t\t\tSystem.out.println(String.format(\"%d %d\", count++, files.length));\r\n\t\t\tint pref = Integer.valueOf(file.getName().substring(7, 9));\r\n\t\t\tif (pref >= start && pref <= end) {\r\n\t\t\t\tcalcurate(file.getAbsolutePath(), data);\r\n\t\t\t}\r\n\t\t}\r\n\t\twrite(output, data);\r\n\t\tSystem.out.println(\"end\");\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/aggr/MeshVolumeCalculator.java b/src/pseudo/aggr/MeshVolumeCalculator.java
--- a/src/pseudo/aggr/MeshVolumeCalculator.java	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/pseudo/aggr/MeshVolumeCalculator.java	(date 1733985192803)
@@ -19,8 +19,9 @@
 	private static final long TIME_INTERVAL_SECONDS = 360 * 1000;
 	
 	// 改修中
-	private static void calcurate(String filename, Map<String, List<Integer>> data) {
+	private static void calculate(String filename, Map<String, List<Integer>> data) {
 		System.out.println(filename);
+		long startday = 1443625200000L;
 		try (BufferedReader br = new BufferedReader(new FileReader(filename));){
             String line;
             int preid = 0, prestep = 0;
@@ -29,7 +30,7 @@
             while ((line = br.readLine()) != null) {	
             	String[] items = line.split(",");
             	int id = Integer.valueOf(items[0]);
-            	int step = (int)(Long.valueOf(items[1]) / TIME_INTERVAL_SECONDS);
+            	int step = (int)((Long.valueOf(items[1])-startday) / TIME_INTERVAL_SECONDS);
             	double lon = Double.valueOf(items[3]);
             	double lat = Double.valueOf(items[4]);
             	
@@ -48,17 +49,19 @@
             
             	// set value to list
             	if (preid != id) {
+
             		// 0 ~ time
                 	for (int i = 0; i <= step && i < maxSteps; i++) {
                 		vals.set(i, vals.get(i)+1);
                 	}
                 	// time ~ max 
                 	if (prevals != null) {
-                		for (int i = prestep; i < maxSteps; i++) {
+                		for (int i = prestep+1; i < maxSteps; i++) {
                 			prevals.set(i, prevals.get(i)+1);
 	                	}
 						// data.put(code, prevals);
                 	}
+
             	}else {
             		for (int i = prestep+1; i <= step && i < maxSteps; i++) {
                 		vals.set(i, vals.get(i)+1);
@@ -93,24 +96,46 @@
 	}
 
 	public static void main(String[] args) {
-		String input = "/home/ubuntu/Data/pseudo/trajectory/city/";
-		String output = "/home/ubuntu/Data/pseudo/mesh_volume.csv";
-		int start = 1;
-		int end = 47;
-		
-		Map<String, List<Integer>> data = new HashMap<>();
-		File[] files = (new File(input)).listFiles();
-		Arrays.sort(files);
-		
-		int count = 0;
-		for (File file : files) {
-			System.out.println(String.format("%d %d", count++, files.length));
-			int pref = Integer.valueOf(file.getName().substring(7, 9));
-			if (pref >= start && pref <= end) {
-				calcurate(file.getAbsolutePath(), data);
+		int start = 22;
+		int end = 26;
+		for(int i=start; i<=end;i++){
+
+			String input = String.format("/mnt/free/owner/PseudoPFLOW/%02d/", i);
+			String output = String.format("/mnt/free/owner/PseudoPFLOW/mesh_pop/%02d_mesh_volume4.csv", i);
+
+			Map<String, List<Integer>> data = new HashMap<>();
+			File[] files = (new File(input)).listFiles();
+			Arrays.sort(files);
+
+			int count = 0;
+
+			for (File file: files){
+				System.out.println(String.format("%d %d", count++, files.length));
+				calculate(file.getAbsolutePath(), data);
+
 			}
-		}
-		write(output, data);
-		System.out.println("end");
+			write(output, data);
+			System.out.println("end");
+		}
+		// String input = "/mnt/free/owner/PseudoPFLOW/14/";
+		// String output = "/mnt/free/owner/PseudoPFLOW/mesh_pop/14_mesh_volume4.csv";
+
+		
+//		Map<String, List<Integer>> data = new HashMap<>();
+//		File[] files = (new File(input)).listFiles();
+//		Arrays.sort(files);
+//
+//		int count = 0;
+//		for (File file : files) {
+//			System.out.println(String.format("%d %d", count++, files.length));
+//			int pref = Integer.valueOf(file.getName().substring(7, 9));
+//			if (pref >= start && pref <= end) {
+//				calcurate(file.getAbsolutePath(), data);
+//			// if(count==2){break;}
+//
+//			}
+//		}
+//		write(output, data);
+//		System.out.println("end");
 	}
 }
Index: src/pseudo/gen/NonCommuter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pseudo.gen;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\nimport java.util.concurrent.Callable;\r\n\r\nimport jp.ac.ut.csis.pflow.routing4.res.Network;\r\nimport pseudo.acs.DataAccessor;\r\nimport pseudo.acs.MNLParamAccessor;\r\nimport pseudo.acs.MkChainAccessor;\r\nimport pseudo.acs.PersonAccessor;\r\nimport pseudo.res.Activity;\r\nimport pseudo.res.EGender;\r\nimport pseudo.res.ELabor;\r\nimport pseudo.res.EMarkov;\r\nimport pseudo.res.EPurpose;\r\nimport pseudo.res.ETransition;\r\nimport pseudo.res.HouseHold;\r\nimport pseudo.res.Country;\r\nimport pseudo.res.GLonLat;\r\nimport pseudo.res.Person;\r\nimport utils.Roulette;\r\n\r\npublic class NonCommuter extends ActGenerator {\r\n\r\n\tpublic NonCommuter(Country japan,\r\n\t\t\t\t\t   Map<EMarkov,Map<EGender,MkChainAccessor>> mrkAcsMap,\r\n\t\t\t\t\t   MNLParamAccessor mnlAcs) {\r\n\t\tsuper(japan, mnlAcs, mrkAcsMap);\r\n\t}\r\n\r\n\tprivate class ActivityTask implements Callable<Integer> {\r\n\t\tprivate int id;\r\n\t\tprivate List<HouseHold> households;\r\n\t\tprivate Map<Integer, Integer> mapMotif;\r\n\t\tprivate int error;\r\n\t\tprivate int total;\r\n\r\n\t\tpublic ActivityTask(int id, List<HouseHold> households,\r\n\t\t\t\tMap<Integer, Integer> mapMotif){\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.households = households;\r\n\t\t\tthis.mapMotif = mapMotif;\r\n\t\t\tthis.total = error = 0;\r\n\t\t}\r\n\r\n\t\tprivate ETransition freeTransitionFilter(ETransition transition) {\r\n\t\t\tif (\ttransition != ETransition.STAY &&\r\n\t\t\t\t\ttransition != ETransition.HOME &&\r\n\t\t\t\t\ttransition != ETransition.SHOPPING &&\r\n\t\t\t\t\ttransition != ETransition.EATING &&\r\n\t\t\t\t\ttransition != ETransition.HOSPITAL &&\r\n\t\t\t\t\ttransition != ETransition.FREE) {\r\n\t\t\t\ttransition = ETransition.FREE;\r\n\t\t\t}\r\n\t\t\treturn transition;\r\n\t\t}\r\n\r\n\t\tprivate int createActivities(HouseHold household, Person person) {\r\n\t\t\tGLonLat home = new GLonLat(household.getHome(), household.getGcode());\r\n\t\t\tEGender gender = person.getGender();\r\n\r\n\t\t\t// Markov Accessor\r\n\t\t\tboolean senior = person.getAge() >= 65;\r\n\t\t\tEMarkov type = senior ? EMarkov.NOLABOR_SENIOR : EMarkov.NOLABOR_JUNIOR;\r\n\t\t\tMkChainAccessor mkAcs = mrkAcsMap.get(type).get(gender);\r\n\r\n\t\t\t// first activity\r\n\t\t\tEPurpose prePurpose = EPurpose.HOME;\r\n\t\t\tActivity homeAct = new Activity(home, 0, 24*3600, EPurpose.HOME);\r\n\t\t\tperson.addAcitivity(homeAct);\r\n\r\n\t\t\t// second... activity\r\n\t\t\tGLonLat curloc = home;\r\n\t\t\tActivity preAct = homeAct;\r\n\t\t\tfor (int i = 3*3600; i < 3600*24; i += timeInterval) {\r\n\t\t\t\tETransition transition = null;\r\n\t\t\t\tList<Double> probs = mkAcs.getProbs(i, prePurpose);\r\n\r\n\t\t\t\tdouble randomValue = getRandom();\r\n\t\t\t\tint choice = Roulette.choice(probs, randomValue);\r\n\t\t\t\ttransition = mkAcs.getTransition(choice);\r\n\t\t\t\ttransition = freeTransitionFilter(transition);\r\n\r\n\t\t\t\tEPurpose purpose = transition.getPurpose();\r\n\r\n\t\t\t\tif (transition != ETransition.STAY) {\r\n\t\t\t\t\t// choose a destination\r\n\t\t\t\t\tcurloc = transition!=ETransition.HOME ?\r\n\t\t\t\t\t\t\tchoiceFreeDestination(curloc, transition, senior, gender, person.getLabor()) : home;\r\n\t\t\t\t\tif (curloc == null) {\r\n\t\t\t\t\t\tperson.getActivities().clear();\r\n\t\t\t\t\t\tperson.addAcitivity(homeAct);\r\n\t\t\t\t\t\treturn 3;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Create an activity\r\n\t\t\t\t\tpreAct = NonCommuter.createActivity(preAct, curloc, i, 3600*24, purpose);\r\n\t\t\t\t\tperson.getActivities().add(preAct);\r\n\r\n\t\t\t\t\tprePurpose = purpose;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tprivate void process(HouseHold household) {\r\n\t\t\tfor (Person person : household.getListPersons()) {\r\n\t\t\t\tint res = createActivities(household, person);\r\n\t\t\t\tif (res == 0) {\r\n\t\t\t\t\tint motif = setMotif(person);\r\n\t\t\t\t\tsynchronized(mapMotif) {\r\n\t\t\t\t\t\tint vol = mapMotif.containsKey(motif) ? mapMotif.get(motif) : 0;\r\n\t\t\t\t\t\tmapMotif.put(motif, vol + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else {\r\n\t\t\t\t\tthis.error++;\r\n\t\t\t\t}\r\n\t\t\t\tthis.total++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic Integer call() throws Exception {\r\n\t\t\ttry {\r\n\t\t\t\tfor (HouseHold household : households) {\r\n\t\t\t\t\tprocess(household);\r\n\t\t\t\t}\r\n\t\t\t}catch(Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tSystem.out.println(String.format(\"[%d]-%d-%d\",id, error, total));\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected Callable<Integer> createTask(Map<Integer, Integer> mapMotif, int id, List<HouseHold> households){\r\n\t\treturn new ActivityTask(id, households, mapMotif);\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tCountry japan = new Country();\r\n\r\n\t\tSystem.out.println(\"start\");\r\n\r\n\t\tString inputDir = null;\r\n\t\tString root = null;\r\n\r\n\t\tInputStream inputStream = Commuter.class.getClassLoader().getResourceAsStream(\"config.properties\");\r\n\t\tif (inputStream == null) {\r\n\t\t\tthrow new FileNotFoundException(\"config.properties file not found in the classpath\");\r\n\t\t}\r\n\t\tProperties prop = new Properties();\r\n\t\tprop.load(inputStream);\r\n\r\n\t\troot = prop.getProperty(\"root\");\r\n\t\tinputDir = prop.getProperty(\"inputDir\");\r\n\t\tSystem.out.println(\"Root Directory: \" + root);\r\n\t\tSystem.out.println(\"Input Directory: \" + inputDir);\r\n\r\n\t\t// load data\r\n\t\tString stationFile = String.format(\"%sbase_station.csv\", inputDir);\r\n\t\tNetwork station = DataAccessor.loadLocationData(stationFile);\r\n\t\tjapan.setStation(station);\r\n\r\n\t\tString cityFile = String.format(\"%scity_boundary.csv\", inputDir);\r\n\t\tDataAccessor.loadCityData(cityFile, japan);\r\n\r\n\t\tString hospitalFile = String.format(\"%scity_hospital.csv\", inputDir);\r\n\t\tDataAccessor.loadHospitalData(hospitalFile, japan);\r\n\r\n\t\tString meshFile = String.format(\"%smesh_ecensus.csv\", inputDir);\r\n\t\tDataAccessor.loadEconomicCensus(meshFile, japan);\r\n\r\n\t\t// load data after ecensus\r\n\t\tString tatemonFile = String.format(\"%scity_tatemono.csv\", inputDir);\r\n\t\tDataAccessor.loadZenrinTatemono(tatemonFile, japan, 1);\r\n\r\n\r\n\t\t// load MNL parmaters\r\n\t\tString mnlFile = String.format(\"%s/mnl/nolabor_params.csv\", inputDir);\r\n\t\tMNLParamAccessor mnlAcs = new MNLParamAccessor();\r\n\t\tmnlAcs.add(mnlFile, ELabor.NO_LABOR);\r\n\r\n\t\tint mfactor = 1;\r\n\r\n\t\t// create activities\r\n\t\tString outputDir = String.format(\"%s/activity/\", root);\r\n\r\n\t\tlong starttime = System.currentTimeMillis();\r\n\t\tint start = 13;\r\n\t\tfor (int i = start; i <= 13; i++) {\r\n\t\t\t// create directory\r\n\t\t\tFile prefDir = new File(outputDir, String.valueOf(i));\r\n\t\t\tSystem.out.println(\"Start prefecture:\" + i + prefDir.mkdirs());\r\n\t\t\tFile householdDir = new File(String.format(\"%s/agent/\", root), String.valueOf(i));\r\n\t\t\t// String householdDir = String.format(\"%s/agent/\", root);\r\n\r\n\t\t\t// load markov data\r\n\t\t\tMap<EMarkov,Map<EGender,MkChainAccessor>> mrkMap = new HashMap<>();\r\n\t\t\t{\r\n\t\t\t\tString key = \"pref.\" + i;\r\n\t\t\t\tString relativePath = prop.getProperty(key);\r\n\t\t\t\tString maleFile = inputDir+ relativePath + \"_trip_nolabor_male_prob.csv\";\r\n\t\t\t\tString femaleFile = inputDir+ relativePath + \"_trip_nolabor_female_prob.csv\";\r\n\t\t\t\tMap<EGender, MkChainAccessor> map = new HashMap<>();\r\n\t\t\t\tmap.put(EGender.MALE, new MkChainAccessor(maleFile));\r\n\t\t\t\tmap.put(EGender.FEMALE, new MkChainAccessor(femaleFile));\r\n\t\t\t\tmrkMap.put(EMarkov.NOLABOR_JUNIOR, map);\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\tString key = \"pref.\" + i;\r\n\t\t\t\tString relativePath = prop.getProperty(key);\r\n\t\t\t\tString maleFile = inputDir+ relativePath + \"_trip_nolabor_male_senior_prob.csv\";\r\n\t\t\t\tString femaleFile = inputDir+ relativePath + \"_trip_nolabor_female_senior_prob.csv\";\r\n\t\t\t\tMap<EGender, MkChainAccessor> map = new HashMap<>();\r\n\t\t\t\tmap.put(EGender.MALE, new MkChainAccessor(maleFile));\r\n\t\t\t\tmap.put(EGender.FEMALE, new MkChainAccessor(femaleFile));\r\n\t\t\t\tmrkMap.put(EMarkov.NOLABOR_SENIOR, map);\r\n\t\t\t}\r\n\t\t\tNonCommuter worker = new NonCommuter(japan, mrkMap, mnlAcs);\r\n\r\n\t\t\tfor (File file : householdDir.listFiles()) {\r\n\t\t\t\tif (file.getName().contains(\".csv\")) {\r\n\t\t\t\t\t// load household\r\n\t\t\t\t\tList<HouseHold> households = PersonAccessor.load(file.getAbsolutePath(), new ELabor[] {ELabor.NO_LABOR}, mfactor);\r\n\t\t\t\t\tworker.assign(households);\r\n\t\t\t\t\tString resultName = String.format(\"%s%s%s%s_nolabor.csv\", outputDir, i, \"/\", file.getName().replaceAll(\".csv\", \"\"));\r\n\t\t\t\t\tPersonAccessor.writeActivities(resultName, households);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"end\");\r\n\t\t\tlong endtime = System.currentTimeMillis();\r\n\t\t\tSystem.out.println(endtime-starttime);\r\n\t\t\tSystem.out.println(worker.mapMotif);\r\n\t\t\tSystem.out.println(endtime - starttime);\r\n\t\t}\r\n\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/gen/NonCommuter.java b/src/pseudo/gen/NonCommuter.java
--- a/src/pseudo/gen/NonCommuter.java	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/pseudo/gen/NonCommuter.java	(date 1734083745400)
@@ -11,10 +11,7 @@
 import java.util.concurrent.Callable;
 
 import jp.ac.ut.csis.pflow.routing4.res.Network;
-import pseudo.acs.DataAccessor;
-import pseudo.acs.MNLParamAccessor;
-import pseudo.acs.MkChainAccessor;
-import pseudo.acs.PersonAccessor;
+import pseudo.acs.*;
 import pseudo.res.Activity;
 import pseudo.res.EGender;
 import pseudo.res.ELabor;
@@ -55,8 +52,9 @@
 					transition != ETransition.HOME &&
 					transition != ETransition.SHOPPING &&
 					transition != ETransition.EATING &&
-					transition != ETransition.HOSPITAL &&
-					transition != ETransition.FREE) {
+					transition != ETransition.HOSPITAL
+					// && transition != ETransition.FREE
+			) {
 				transition = ETransition.FREE;
 			}
 			return transition;
@@ -147,12 +145,13 @@
 
 	public static void main(String[] args) throws IOException {
 
-		Country japan = new Country();
+		Country country = new Country();
 
 		System.out.println("start");
 
 		String inputDir = null;
 		String root = null;
+		String output = null;
 
 		InputStream inputStream = Commuter.class.getClassLoader().getResourceAsStream("config.properties");
 		if (inputStream == null) {
@@ -163,26 +162,36 @@
 
 		root = prop.getProperty("root");
 		inputDir = prop.getProperty("inputDir");
+		output = prop.getProperty("outputDir");
 		System.out.println("Root Directory: " + root);
 		System.out.println("Input Directory: " + inputDir);
 
 		// load data
 		String stationFile = String.format("%sbase_station.csv", inputDir);
 		Network station = DataAccessor.loadLocationData(stationFile);
-		japan.setStation(station);
+		country.setStation(station);
 
 		String cityFile = String.format("%scity_boundary.csv", inputDir);
-		DataAccessor.loadCityData(cityFile, japan);
+		DataAccessor.loadCityData(cityFile, country);
+
+		String censusFile = String.format("%scity_census_od.csv", inputDir);
+		CensusODAccessor odAcs = new CensusODAccessor(censusFile, country);
 
 		String hospitalFile = String.format("%scity_hospital.csv", inputDir);
-		DataAccessor.loadHospitalData(hospitalFile, japan);
+		DataAccessor.loadHospitalData(hospitalFile, country);
+
+		String restaurantFile = String.format("%scity_restaurant.csv", inputDir);
+		DataAccessor.loadRestaurantData(restaurantFile, country);
+
+		String retailFile = String.format("%scity_retail.csv", inputDir);
+		DataAccessor.loadRetailData(retailFile, country);
 
 		String meshFile = String.format("%smesh_ecensus.csv", inputDir);
-		DataAccessor.loadEconomicCensus(meshFile, japan);
+		DataAccessor.loadEconomicCensus(meshFile, country);
 
-		// load data after ecensus
+		// load data after economic census
 		String tatemonFile = String.format("%scity_tatemono.csv", inputDir);
-		DataAccessor.loadZenrinTatemono(tatemonFile, japan, 1);
+		DataAccessor.loadZenrinTatemono(tatemonFile, country, 1);
 
 
 		// load MNL parmaters
@@ -193,11 +202,11 @@
 		int mfactor = 1;
 
 		// create activities
-		String outputDir = String.format("%s/activity/", root);
+		String outputDir = String.format("%s/activity/", output);
 
 		long starttime = System.currentTimeMillis();
-		int start = 13;
-		for (int i = start; i <= 13; i++) {
+		int start = 1;
+		for (int i = start; i <= 47; i++) {
 			// create directory
 			File prefDir = new File(outputDir, String.valueOf(i));
 			System.out.println("Start prefecture:" + i + prefDir.mkdirs());
@@ -226,7 +235,7 @@
 				map.put(EGender.FEMALE, new MkChainAccessor(femaleFile));
 				mrkMap.put(EMarkov.NOLABOR_SENIOR, map);
 			}
-			NonCommuter worker = new NonCommuter(japan, mrkMap, mnlAcs);
+			NonCommuter worker = new NonCommuter(country, mrkMap, mnlAcs);
 
 			for (File file : householdDir.listFiles()) {
 				if (file.getName().contains(".csv")) {
Index: .idea/libraries/pflowlib.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/pflowlib.xml b/.idea/libraries/pflowlib.xml
deleted file mode 100644
--- a/.idea/libraries/pflowlib.xml	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ /dev/null	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
@@ -1,9 +0,0 @@
-<component name="libraryTable">
-  <library name="pflowlib">
-    <CLASSES>
-      <root url="jar://$PROJECT_DIR$/lib/pflowlib.jar!/" />
-    </CLASSES>
-    <JAVADOC />
-    <SOURCES />
-  </library>
-</component>
\ No newline at end of file
Index: src/pseudo/gen/TripGenerator_GoogleMapAPI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/gen/TripGenerator_GoogleMapAPI.java b/src/pseudo/gen/TripGenerator_GoogleMapAPI.java
new file mode 100644
--- /dev/null	(date 1728972234996)
+++ b/src/pseudo/gen/TripGenerator_GoogleMapAPI.java	(date 1728972234996)
@@ -0,0 +1,97 @@
+package pseudo.gen;
+
+import java.net.URI;
+import java.net.http.HttpClient;
+import java.net.http.HttpRequest;
+import java.net.http.HttpResponse;
+import java.time.Instant;
+import java.time.ZonedDateTime;
+import java.time.format.DateTimeFormatter;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+public class TripGenerator_GoogleMapAPI {
+
+    private static final String API_KEY = "AIzaSyB4_2_KSvh8Cgy6EGrczN8uEdpl2U3AtVU";
+
+    public static void main(String[] args) throws Exception {
+        // Create a Gson instance for JSON creation
+        Gson gson = new GsonBuilder().setPrettyPrinting().create();
+
+        // Build the JSON payload
+        JsonObject requestBody = new JsonObject();
+
+        ZonedDateTime departureTime = ZonedDateTime.parse("2024-10-15T10:00:00Z");
+        String rfc3339Timestamp = departureTime.format(DateTimeFormatter.ISO_INSTANT);
+
+        // Origin location
+        JsonObject origin = new JsonObject();
+        JsonObject originLocation = new JsonObject();
+        JsonObject originLatLng = new JsonObject();
+        originLatLng.addProperty("latitude", 34.643834606143116);
+        originLatLng.addProperty("longitude", 135.11090082771977);
+        originLocation.add("latLng", originLatLng);
+        origin.add("location", originLocation);
+
+        // Destination location
+        JsonObject destination = new JsonObject();
+        JsonObject destinationLocation = new JsonObject();
+        JsonObject destinationLatLng = new JsonObject();
+        destinationLatLng.addProperty("latitude", 34.641830936559764);
+        destinationLatLng.addProperty("longitude", 135.10362667688685);
+        destinationLocation.add("latLng", destinationLatLng);
+        destination.add("location", destinationLocation);
+
+        // Add origin, destination to request body
+        requestBody.add("origin", origin);
+        requestBody.add("destination", destination);
+
+        // Add other parameters
+        requestBody.addProperty("travelMode", "TRANSIT");
+        // requestBody.addProperty("routingPreference", "TRAFFIC_AWARE");
+        requestBody.addProperty("departureTime", rfc3339Timestamp);
+        requestBody.addProperty("computeAlternativeRoutes", true);
+
+        // Add route modifiers
+        JsonObject routeModifiers = new JsonObject();
+        routeModifiers.addProperty("avoidTolls", false);
+        routeModifiers.addProperty("avoidHighways", false);
+        routeModifiers.addProperty("avoidFerries", false);
+        requestBody.add("routeModifiers", routeModifiers);
+
+        // Add routing preference (example: LESS_WALKING or FEWER_TRANSFERS)
+        // requestBody.addProperty("routingPreference", "FEWER_TRANSFERS");
+
+        // Add transit modes (e.g., BUS, RAIL)
+        JsonArray modes = new JsonArray();
+        modes.add("BUS");
+        modes.add("RAIL");
+        requestBody.add("modes", modes);
+
+        requestBody.addProperty("languageCode", "en-US");
+        // requestBody.addProperty("units", "IMPERIAL");
+
+        // Convert the JSON object to a string
+        String jsonRequest = gson.toJson(requestBody);
+
+        // Prepare the POST request
+        HttpRequest request = HttpRequest.newBuilder()
+                .uri(new URI("https://routes.googleapis.com/directions/v2:computeRoutes"))
+                .header("Content-Type", "application/json")
+                .header("X-Goog-Api-Key", API_KEY)
+                .header("X-Goog-FieldMask", "routes.*")
+                .POST(HttpRequest.BodyPublishers.ofString(jsonRequest))
+                .build();
+
+        // Create an HTTP client and send the request
+        HttpClient client = HttpClient.newHttpClient();
+        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
+
+        // Print the response
+        System.out.println("Response code: " + response.statusCode());
+        System.out.println("Response body: " + response.body());
+    }
+}
Index: src/scripts/Evaluate_Activity.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"id\": \"604d8a4b-da17-45f5-973f-3e4acb79990f\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import seaborn as sns\\n\",\n    \"from datetime import datetime, timedelta\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"6a1ff98f-8a2f-42c4-9b87-a689cf9a8bb7\",\n   \"metadata\": {\n    \"jp-MarkdownHeadingCollapsed\": true\n   },\n   \"source\": [\n    \"## Activity Differences Check\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"id\": \"1066f2b6-3828-43e3-8939-2e6a15a88eff\",\n   \"metadata\": {\n    \"collapsed\": true,\n    \"jupyter\": {\n     \"outputs_hidden\": true,\n     \"source_hidden\": true\n    }\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1600x600 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"def visualize_activity_ratios(file_path):\\n\",\n    \"    # Load the data\\n\",\n    \"    data = pd.read_csv(file_path, names=['id', 'age', 'gender', 'occupation', 'starttime', 'duration', 'activity', 'lon', 'lat', 'citycode'], header=None, skiprows=1)\\n\",\n    \"    \\n\",\n    \"    # Convert 'starttime' from seconds to a readable time format (HH:MM)\\n\",\n    \"    data['starttime_formatted'] = data['starttime'].apply(lambda x: (datetime.min + timedelta(seconds=x)).time())\\n\",\n    \"    \\n\",\n    \"    # Group the data by 'starttime_formatted' and 'activity' and count unique 'id's to consider population\\n\",\n    \"    grouped_data = data.groupby(['starttime_formatted', 'activity'])['id'].nunique().unstack(fill_value=0)\\n\",\n    \"    \\n\",\n    \"    # Calculate the ratio of activities based on the unique 'id' counts (population)\\n\",\n    \"    population_per_time = len(data['id'].unique())  # Total unique individuals per starttime\\n\",\n    \"    activity_ratios = grouped_data.div(population_per_time, axis=0)[[2,3,100,200,300,400,500]]\\n\",\n    \"    # print(activity_ratios[[2,3,100,200,300,400,500]])\\n\",\n    \"    \\n\",\n    \"    # Plotting with ordered activities and a diverse color palette\\n\",\n    \"    plt.figure(figsize=(16, 6))\\n\",\n    \"    activity_ratios.plot(kind='area', stacked=True, ax=plt.gca(), colormap='tab20')\\n\",\n    \"    plt.title('Activity Ratios Over Time Based on Population')\\n\",\n    \"    plt.xlabel('Start Time (HH:MM)')\\n\",\n    \"    plt.ylabel('Activity Ratio')\\n\",\n    \"    plt.xticks(rotation=45)\\n\",\n    \"    plt.legend(title='Activity', loc='upper left')\\n\",\n    \"    plt.tight_layout()\\n\",\n    \"    \\n\",\n    \"    # Show the plot\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"# Example usage\\n\",\n    \"file_path = '/mnt/large/data/PseudoPFLOW/activity/13/person_13101_labor.csv'  # Replace with your actual file path\\n\",\n    \"visualize_activity_ratios(file_path)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"id\": \"5bd7041b-fce3-44a7-9a46-f251c84d793e\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def visualize_activity_ratios(file_path):\\n\",\n    \"    # Load the data\\n\",\n    \"    data = pd.read_csv(file_path, names=['id', 'age', 'gender', 'occupation', 'starttime', 'duration', 'activity', 'lon', 'lat', 'citycode'], header=None, skiprows=1)\\n\",\n    \"    \\n\",\n    \"    # Convert 'starttime' from seconds to a readable time format (HH:MM)\\n\",\n    \"    data['starttime_formatted'] = data['starttime'].apply(lambda x: (datetime.min + timedelta(seconds=x)).time())\\n\",\n    \"    \\n\",\n    \"    # Duplicate 00:00 data for missing time slots between 00:15 and 02:45\\n\",\n    \"    midnight_data = data[data['starttime_formatted'] == datetime.strptime(\\\"00:00\\\", \\\"%H:%M\\\").time()]\\n\",\n    \"    for minutes in range(15, 166, 15):  # Loop from 00:15 to 02:45 in 15-minute intervals\\n\",\n    \"        fill_time = (datetime.min + timedelta(minutes=minutes)).time()\\n\",\n    \"        fill_data = midnight_data.copy()\\n\",\n    \"        fill_data['starttime_formatted'] = fill_time\\n\",\n    \"        data = pd.concat([data, fill_data])\\n\",\n    \"    \\n\",\n    \"    # Group the data by 'starttime_formatted' and 'activity' and count unique 'id's\\n\",\n    \"    grouped_data = data.groupby(['starttime_formatted', 'activity'])['id'].nunique().unstack(fill_value=0)\\n\",\n    \"    \\n\",\n    \"    # Calculate the ratio of activities based on the unique 'id' counts (population)\\n\",\n    \"    population_per_time = len(data['id'].unique())  # Total unique individuals per starttime\\n\",\n    \"    activity_ratios = grouped_data.div(population_per_time, axis=0)[[2,3, 100,200,300,400, 500]]\\n\",\n    \"    \\n\",\n    \"    # Plotting with ordered activities and a diverse color palette\\n\",\n    \"    plt.figure(figsize=(16, 6))\\n\",\n    \"    activity_ratios.plot(kind='area', stacked=True, ax=plt.gca(), colormap='tab20')\\n\",\n    \"    plt.title('Activity Ratios Over Time Based on Population')\\n\",\n    \"    plt.xlabel('Start Time (HH:MM)')\\n\",\n    \"    plt.ylabel('Activity Ratio')\\n\",\n    \"    plt.xticks(rotation=45)\\n\",\n    \"    plt.legend(title='Activity', loc='upper left')\\n\",\n    \"    plt.tight_layout()\\n\",\n    \"    \\n\",\n    \"    # Show the plot\\n\",\n    \"    plt.show()\\n\",\n    \"\\n\",\n    \"# You can use this improved function by passing the file path as an argument.\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"id\": \"93743f5f-57a9-4dd2-8049-5a9781137888\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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rwcffFCtW7eWx+PRBRdcoG+++eaIdQMAANRnjNgAAAA4wcybN0+XX3653G63rr76aj3xxBNat25dOKiQpMLCQp177rn64osvdP311+u0007T/v379dprr2nnzp3q1q2b7r///gpTBVV257/L5dJll12ml156SU899VTE9EGvvPKKvF6vrrrqqkprvemmm7R7924tXbpU//d//xfe7nA4dO211+qhhx7SwYMHlZqaGt73+uuvKz8/v9K7/I8mEAho586datKkScT2RYsWqbi4WLfccouaNm2qtWvX6h//+Id27typRYsWHbHWw9myZYvOPfdcJSUl6X/+53/kcrn01FNPacCAAeEP4aXQB6JTp07VDTfcoDPPPFP5+fn65JNPtGHDBv3qV7867Plff/11eTwe/fa3v610f/v27XXOOefo3XffVUlJiU4//XR16NBBzz//vEaNGhXRduHChWrSpIkGDx4sScrJyVG/fv3kcDg0btw4NW/eXG+99ZbGjBmj/Px83XnnnRHHP/DAA3K73brrrrvk9XprbAqpQ4cO6eKLL9ZVV12lK6+8Uk888YSuuuoqzZs3T3feeaduvvlm/e53v9PDDz+sK664Qj/++KMaN258TNdUGb/fr/3790sKBWyffvqpHnnkEZ133nlq3759uN3SpUv13XffafTo0crIyNCWLVv0r3/9S1u2bNGaNWvCgdjNN9+sF154QePGjVP37t114MABffjhh/riiy902mmnSZLeffddDRkyRH369NGkSZNkGIbmzJmjgQMH6oMPPtCZZ54pSdq8ebMuvPBCNW/eXJMnT1YgENCkSZOUnp5epfd27ty5Gj16tM444wxNnTpVOTk5mjlzpj766CN9+umnEVMrBYNBDR48WH379tX06dO1bNky/f3vf1fHjh11yy23VKm/X/ruu+9kmqZSUlKUk5Ojs846S8XFxbr99tvVtGlTPfPMM7r00kv1wgsv6LLLLos49sEHH5TD4dA999yjvXv3asaMGRo0aJA2btyo+Pj4Y6rn56ry9bz88sv11Vdf6bnnntOjjz6qZs2aSQqFqZWp7jVOmzZNhmHorrvuUl5enh566CFdc801+vjjj4/7+gAAAOokGwAAACeMTz75xJZkL1261LZt27Ysy27durV9xx13RLS77777bEn2Sy+9VOEclmXZtm3b69atsyXZc+bMqdBm1KhRdrt27cKv3377bVuS/frrr0e0u+iii+wOHTqEX2/fvr3COceOHWtX9mPrtm3bbEn2E088EbH90ksvtTMzM8N1Hk67du3sCy+80N63b5+9b98+e/Pmzfbvf/97W5I9duzYiLbFxcUVjp86dartcDjsH3744ai12rZtS7InTZoUfj1s2DDb7Xbb3377bXjb7t277caNG9vnnXdeeFuvXr3soUOHHvFaKpOSkmL36tXriG1uv/12W5K9adMm27Zte+LEibbL5bIPHjwYbuP1eu2UlBT7+uuvD28bM2aM3aJFC3v//v0R57vqqqvs5OTk8Pu1YsUKW5LdoUOHSt/DIznS91f5eVesWBHe1r9/f1uSPX/+/PC2L7/80pZkG4Zhr1mzJry9/Pvx5+eu6jUdTrt27WxJFR5nn312hXNWdq7nnnvOlmS///774W3JyckVvhd/zrIsu3PnzvbgwYMjvt+Li4vt9u3b27/61a/C24YNG2Z7PJ6I79etW7fapmke9nu2nM/ns9PS0uwePXrYJSUl4e2LFy+2Jdn33XdfeNuoUaNsSfb9998fcY5TTz3V7tOnzxH7se3Q17Fr167hv5dffPFF+Pv0kksusW3btu+8805bkv3BBx+EjysoKLDbt29vZ2Zm2sFg0Lbtn75PWrVqZefn54fbPv/887Yke+bMmeFt7dq1s0eNGlVpPf379w+/ruzfqKp+PR9++GFbkr19+/YK7X/Zf3WvsVu3brbX6w23nTlzpi3J3rx5c4W+AAAAGgKmogIAADiBzJs3T+np6Tr//PMlhUY+jBgxQgsWLIiYJubFF19Ur169KtwVXH5MdQ0cOFDNmjXTwoULw9sOHTqkpUuXasSIEcdwJdJJJ52kvn37RkyldfDgQb311lu65pprqlTnO++8o+bNm6t58+bq2bOn/u///k+jR4/Www8/HNHu53d1FxUVaf/+/TrrrLNk27Y+/fTTatceDAb1zjvvaNiwYerQoUN4e4sWLfS73/1OH374YXi6ppSUFG3ZskVff/11tfooKCgIj0Y4nPL95X2NGDFCfr9fL730UrjNO++8o9zc3PDXybZtvfjii7rkkktk27b2798ffgwePFh5eXkVpkoaNWpUVO6MP5rExMSI0T9dunRRSkqKunXrFh4BIyn8/Lvvvjvma6pM3759tXTpUi1dulSLFy/Wgw8+qC1btujSSy+NmLbs5+9FaWmp9u/fr379+klSRD8pKSn6+OOPtXv37kr727hxo77++mv97ne/04EDB8I1FxUV6YILLtD7778vy7IUDAb19ttva9iwYWrbtm34+G7duoVH4RzJJ598or179+rWW2+NWNtk6NCh6tq1a4XpkaTQaJOfO/fcc8Pv99F8+eWX4b+X3bp10z/+8Q8NHTo0PC3Ym2++qTPPPFPnnHNO+JjExET94Q9/0Pfff6+tW7dGnG/kyJERfxeuuOIKtWjRQm+++WaV6jmaqn49q6O61zh69OiIkVDlo+iq+p4DAADUNwQbAAAAJ4hgMKgFCxbo/PPP1/bt2/XNN9/om2++Ud++fZWTk6Ply5eH23777bfq0aNH1Pp2Op0aPny4Xn31VXm9XknSSy+9JL/ff8zBhhT6wPKjjz7SDz/8ICk0ZZTf79fvf//7Kh1f/kH0kiVLNH36dKWkpOjQoUMVpkrasWOHrrvuOqWmpobXDOjfv78kKS8vr9p179u3T8XFxerSpUuFfd26dZNlWeE1AO6//37l5ubqpJNOUs+ePXX33Xdr06ZNR+2jcePGKigoOGKb8v3lH/r26tVLXbt2jQigFi5cqGbNmmngwIHh2nNzc/Wvf/0r/OFz+aN8HZW9e/dG9PPzaZhqUuvWrSsEWsnJyWrTpk2FbVIoXJOO7Zoq06xZMw0aNEiDBg3S0KFD9ec//1n/+c9/tGrVKv3nP/8Jtzt48KDuuOMOpaenKz4+Xs2bNw+/Rz//fnrooYf0+eefq02bNjrzzDM1efLkiA+qy8OuUaNGVaj7P//5j7xer/Ly8rRv3z6VlJRUunh5Zd+Dv1T+96uytl27dg3vL+fxeCpMsdSkSZPw+300mZmZWrp0qZYtW6YPP/xQ2dnZWrx4cXj6ph9++OGwf3d+Xm+5X163w+FQp06dwutbHK+qfj2ro7rX+PPASlJ4Or2qvucAAAD1DWtsAAAAnCDeffdd7dmzRwsWLNCCBQsq7J83b54uvPDCGuv/qquu0lNPPaW33npLw4YN0/PPP6+uXbuqV69ex3XO8ePHa968efrzn/+sZ599VqeffnqVPqyVfvogWpIGDx6srl276uKLL9bMmTM1YcIESaFA6Fe/+pUOHjyoe+65R127dlWjRo20a9cuXXfddbIs65jrr4rzzjtP3377rV599VW98847+s9//qNHH31UTz75pG644YbDHtetWzd9+umn8nq9iouLq7TNpk2b5HK5Ij74HTFihB588EHt379fjRs31muvvaarr746vPh1+fVee+21FdbiKHfKKadEvK6N0RqSZJpmtbbbti3p2K6pqi644AJJ0vvvv6/bbrtNkvTb3/5Wq1at0t13363evXsrMTFRlmXp17/+dcT3029/+1ude+65evnll/XOO+/o4Ycf1t/+9je99NJLGjJkSLjtww8/rN69e1faf2JiYjhMrC2He7+rqlGjRuG/l7XlcCO8gsHgUa+nql/PmnS073EAAICGhmADAADgBDFv3jylpaVp1qxZFfa99NJLevnll/Xkk08qPj5eHTt21Oeff37E81V3SqrzzjtPLVq00MKFC8OLVv+///f/jnrckfpJTU3V0KFDNW/ePF1zzTX66KOPNGPGjGrV9XNDhw5V//799de//lU33XSTGjVqpM2bN+urr77SM888o5EjR4bbLl26tFq1/lzz5s2VkJCgbdu2Vdj35ZdfyjCMiFEGqampGj16tEaPHq3CwkKdd955mjx58hGDjYsvvlirV6/WokWLKl1I/fvvv9cHH3ygQYMGRQQPI0aM0JQpU/Tiiy8qPT1d+fn5EdM7NW/eXI0bN1YwGKz1D59rSk1eUyAQkCQVFhZKCt1Bv3z5ck2ZMkX33XdfuN3hphpr0aKFbr31Vt16663au3evTjvtND344IMaMmSIOnbsKElKSko6Yt3NmzdXfHx8pX1U9j34S+3atQu3LR+58/Pjy/fXlnbt2h327075/p/75XXbtq1vvvkmIqxq0qSJcnNzK5zzhx9+iJgu7peq8/Wszr+Z1b1GAACAEw1TUQEAAJwASkpK9NJLL+niiy/WFVdcUeExbtw4FRQU6LXXXpMkDR8+XJ999plefvnlCucqvwO4UaNGklTph4GVMQxDV1xxhV5//XX93//9nwKBQJWmoTpaP7///e+1detW3X333TJNM+JD+GNxzz336MCBA/r3v/8t6ac7oX9+57Nt25o5c2a1ay1nmqYuvPBCvfrqqxHT4eTk5Gj+/Pk655xzlJSUJEk6cOBAxLGJiYnq1KnTUe/Cv+mmm5SWlqa77767wjz7paWlGj16tGzbjvgwVgqN9OjZs6cWLlyohQsXqkWLFjrvvPMiah8+fLhefPHFSsOvffv2HbGuuqgmr+n111+XpPDIpMq+nyRVCOSCwWCFaYzS0tLUsmXL8Ne+T58+6tixo6ZPnx4OTiqr2zRNDR48WK+88op27NgR3v/FF1/o7bffPuo1nH766UpLS9OTTz4Z8X331ltv6YsvvtDQoUOPeo5ouuiii7R27VqtXr06vK2oqEj/+te/lJmZqe7du0e0/+9//xsxLdsLL7ygPXv2aMiQIeFtHTt21Jo1a+Tz+cLbFi9eHJ4S7nCq+vWUqvdvZnWvEQAA4ETDiA0AAIATwGuvvaaCggJdeumlle7v16+fmjdvrnnz5mnEiBG6++679cILL+jKK6/U9ddfrz59+ujgwYN67bXX9OSTT6pXr17q2LGjUlJS9OSTT6px48Zq1KiR+vbte8T1FEaMGKF//OMfmjRpknr27BmeL/5I+vTpI0m6/fbbNXjw4ArhxdChQ9W0aVMtWrRIQ4YMUVpaWjXfnUhDhgxRjx499Mgjj2js2LHq2rWrOnbsqLvuuku7du1SUlKSXnzxxUrnrj9arT/3l7/8RUuXLtU555yjW2+9VU6nU0899ZS8Xq8eeuihcLvu3btrwIAB6tOnj1JTU/XJJ5/ohRde0Lhx4454HU2bNtULL7ygoUOH6rTTTtMNN9yg7t27Kzs7W3PnztU333yjmTNn6qyzzqpw7IgRI3TffffJ4/FozJgxMozI+6GmTZumFStWqG/fvrrxxhvVvXt3HTx4UBs2bNCyZct08ODBo77PdU00rmnXrl169tlnJUk+n0+fffaZnnrqKTVr1iw8DVVSUpLOO+88PfTQQ/L7/WrVqpXeeecdbd++PeJcBQUFat26ta644gr16tVLiYmJWrZsmdatW6e///3vkkJh4X/+8x8NGTJEJ598skaPHq1WrVpp165dWrFihZKSksLBypQpU7RkyRKde+65uvXWWxUIBPSPf/xDJ5988lHXbHG5XPrb3/6m0aNHq3///rr66quVk5OjmTNnKjMzU+PHj6/2+308/vSnP+m5557TkCFDdPvttys1NVXPPPOMtm/frhdffLHC92tqaqrOOeccjR49Wjk5OZoxY4Y6deqkG2+8Mdzmhhtu0AsvvKBf//rX+u1vf6tvv/1Wzz77bHhUzOFU9esp/fTvw//7f/9PV111lVwuly655JJw4HE81wgAAHDCsQEAANDgXXLJJbbH47GLiooO2+a6666zXS6XvX//ftu2bfvAgQP2uHHj7FatWtlut9tu3bq1PWrUqPB+27btV1991e7evbvtdDptSfacOXNs27btUaNG2e3atavQh2VZdps2bWxJ9l/+8pcK+7dv3x5xHtu27UAgYN9222128+bNbYfDYVf2I+ytt95qS7Lnz59fxXfEttu1a2cPHTq00n1z586NqGPr1q32oEGD7MTERLtZs2b2jTfeaH/22WfVqlWSPWnSpIh+NmzYYA8ePNhOTEy0ExIS7PPPP99etWpVRJu//OUv9plnnmmnpKTY8fHxdteuXe0HH3zQ9vl8VbrO7du32zfeeKPdtm1b2+Vy2c2aNbMvvfRS+4MPPjjsMV9//bUtyZZkf/jhh5W2ycnJsceOHWu3adPGdrlcdkZGhn3BBRfY//rXv8JtVqxYYUuyFy1aVKVaf27dunUV3t9fnnfFihXhbf3797dPPvnkCm0P93WWZI8dO7ba13Q47dq1C79nkmzDMOy0tDT76quvtr/55puItjt37rQvu+wyOyUlxU5OTravvPJKe/fu3RHfI16v17777rvtXr162Y0bN7YbNWpk9+rVy3788ccr9P3pp5/al19+ud20aVM7Li7Obteunf3b3/7WXr58eUS7lStX2n369LHdbrfdoUMH+8knn7QnTZpU6d+pyixcuNA+9dRT7bi4ODs1NdW+5ppr7J07d0a0GTVqlN2oUaMKx1a1n8N9HX/p22+/ta+44go7JSXF9ng89plnnmkvXrw4ok3598lzzz1nT5w40U5LS7Pj4+PtoUOH2j/88EOFc/7973+3W7VqZcfFxdlnn322/cknn9j9+/e3+/fvH25T2b9RVfl6lnvggQfsVq1a2YZh2JLs7du327Yd+v4ZNWrUMV/jL/+OVVYnAABAQ+KwbVYTAwAAQP02fvx4zZ49W9nZ2UpISIh1OQDqgPfee0/nn3++Fi1apCuuuCLW5QAAACCKGL8KAACAeq20tFTPPvushg8fTqgBAAAAACcA1tgAAABAvbR3714tW7ZML7zwgg4cOKA77rgj1iUBAAAAAGoBwQYAAADqpa1bt+qaa65RWlqaHnvsMfXu3TvWJQEAAAAAagFrbAAAAAAAAAAAgHqDNTYAAAAAAAAAAEC9QbABAAAAAAAAAADqDdbYOEaWZWn37t1q3LixHA5HrMsBAAAAAAAAAKDesm1bBQUFatmypQzjyGMyCDaO0e7du9WmTZtYlwEAAAAAAAAAQIPx448/qnXr1kdsQ7BxjBo3biwp9CYnJSXFuBoAAAAAAAAAAOqv/Px8tWnTJvzZ+5EQbByj8umnkpKSCDYAAAAAAAAAAIiCqiz9wOLhAAAAAAAAAACg3iDYAAAAAAAAAAAA9QbBBgAAAAAAAAAAqDdYY6OGBYNB+f3+WJdRZ7lcLpmmGesyAAAAAAAAAAD1BMFGDbFtW9nZ2crNzY11KXVeSkqKMjIyqrQoDAAAAAAAAADgxEawUUPKQ420tDQlJCTwoX0lbNtWcXGx9u7dK0lq0aJFjCsCAAAAAAAAANR1BBs1IBgMhkONpk2bxrqcOi0+Pl6StHfvXqWlpTEtFQAAAAAAAADgiFg8vAaUr6mRkJAQ40rqh/L3ibVIAAAAAAAAAABHQ7BRg5h+qmp4nwAAAAAAAAAAVUWwAQAAAAAAAAAA6g2CjQZu7ty5SklJqXL79957Tw6HQ7m5uTVWEwAAAAAAAAAAx4pgow5avXq1TNPU0KFDq3VcZmamZsyYEbFtxIgR+uqrr6p8jrPOOkt79uxRcnKypOoHIwAAAAAAAAAA1CSCjTpo9uzZuu222/T+++9r9+7dx3Wu+Ph4paWlVbm92+1WRkYG614AAAAAAAAAAOokgo06prCwUAsXLtQtt9yioUOHau7cuRH7X3/9dZ1xxhnyeDxq1qyZLrvsMknSgAED9MMPP2j8+PFyOBzhYOLnIy6++uorORwOffnllxHnfPTRR9WxY0dJkVNRvffeexo9erTy8vLC55w8ebLuv/9+9ejRo0LtvXv31v/+7/9G+R0BAAAAAAAAAOAnBBt1zPPPP6+uXbuqS5cuuvbaa/X000/Ltm1J0htvvKHLLrtMF110kT799FMtX75cZ555piTppZdeUuvWrXX//fdrz5492rNnT4Vzn3TSSTr99NM1b968iO3z5s3T7373uwrtzzrrLM2YMUNJSUnhc9511126/vrr9cUXX2jdunXhtp9++qk2bdqk0aNHR/PtAAAAAAAAAAAgAsFGHTN79mxde+21kqRf//rXysvL08qVKyVJDz74oK666ipNmTJF3bp1U69evTRx4kRJUmpqqkzTVOPGjZWRkaGMjIxKz3/NNdfoueeeC7/+6quvtH79el1zzTUV2rrdbiUnJ8vhcITPmZiYqNatW2vw4MGaM2dOuO2cOXPUv39/dejQIWrvBQAAAAAAAAAAv0SwUYds27ZNa9eu1dVXXy1JcjqdGjFihGbPni1J2rhxoy644ILj6uOqq67S999/rzVr1kgKjdY47bTT1LVr12qd58Ybb9Rzzz2n0tJS+Xw+zZ8/X9dff/1x1QYAAAAAAAAAwNE4Y10AfjJ79mwFAgG1bNkyvM22bcXFxemf//yn4uPjj7uPjIwMDRw4UPPnz1e/fv00f/583XLLLdU+zyWXXKK4uDi9/PLLcrvd8vv9uuKKK467PgAAAAAAAAAAjoQRG3VEIBDQf//7X/3973/Xxo0bw4/PPvtMLVu21HPPPadTTjlFy5cvP+w53G63gsHgUfu65pprtHDhQq1evVrfffedrrrqqmqf0+l0atSoUZozZ47mzJmjq666KirBCwAAx2tnUam+KyiJdRkAAAAAAKCGxDzYmDVrljIzM+XxeNS3b1+tXbv2sG23bNmi4cOHKzMzUw6HQzNmzKjQpnzfLx9jx44NtxkwYECF/TfffHNNXF6VLV68WIcOHdKYMWPUo0ePiMfw4cM1e/ZsTZo0Sc8995wmTZqkL774Qps3b9bf/va38DkyMzP1/vvva9euXdq/f/9h+7r88stVUFCgW265Reeff37ECJFfyszMVGFhoZYvX679+/eruLg4vO+GG27Qu+++qyVLljANFQCgTrBtW+/u3quV2Ye0q4hwAwAAAACAhiimwcbChQs1YcIETZo0SRs2bFCvXr00ePBg7d27t9L2xcXF6tChg6ZNm3bYxbHXrVunPXv2hB9Lly6VJF155ZUR7W688caIdg899FB0L66aZs+erUGDBik5ObnCvuHDh+uTTz5RamqqFi1apNdee029e/fWwIEDI4Kg+++/X99//706duyo5s2bH7avxo0b65JLLtFnn31W6aLhP3fWWWfp5ptv1ogRI9S8efOI96lz584666yz1LVrV/Xt2/cYrhoAgOjyW0EFy2baXL3zixhXAwAAAAAAaoLDtm07Vp337dtXZ5xxhv75z39KkizLUps2bXTbbbfpT3/60xGPzczM1J133qk777zziO3uvPNOLV68WF9//bUcDoek0IiN3r17Vzrio6ry8/OVnJysvLw8JSUlRewrLS3V9u3b1b59e3k8nmPu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DSMuxpUAAAAAANBwxTzYmDVrljIzM+XxeNS3b1+tXbv2sG23bNmi4cOHKzMzUw6HQzNmzKjQZurUqTrjjDPUuHFjpaWladiwYdq2bVtEmwEDBsjhcEQ8br755mhfWr3TuHFj9ejRI+LRqFEjNW3aVD169FBycrLGjBmjCRMmaMWKFVq/fr1Gjx6trKws9evXT5J04YUXqnv37vr973+vzz77TG+//bbuvfdejR07VnFxfMgDAIgOywhNmWgE69iIDV9o8XDLdMu27RhXAwAAAABAwxTTYGPhwoWaMGGCJk2apA0bNqhXr14aPHhwxN3+P1dcXKwOHTpo2rRph53WaOXKlRo7dqzWrFmjpUuXyu/368ILL1RRUVFEuxtvvFF79uwJPx566KGoX19D9Oijj+riiy/W8OHDdd555ykjI0MvvfRSeL9pmlq8eLFM01RWVpauvfZajRw5Uvfff38MqwYANDSWWRZsBOrWiA1neMSGR0GCDQAAAAAAakRMFw9/5JFHdOONN2r06NGSpCeffFJvvPGGnn76af3pT3+q0P6MM87QGWecIUmV7pekJUuWRLyeO3eu0tLStH79ep133nnh7QkJCbW65oPblSrDiJNleWutT8OIk9uVelzneO+99yJeezwezZo1S7NmzTrsMe3atdObb755XP0CAHAkQSO+7EldCzbKRmwYHvktW86Yj40FAAAAAKDhiVmw4fP5tH79ek2cODG8zTAMDRo0SKtXr45aP3l5eZKk1NTID/jnzZunZ599VhkZGbrkkkv0v//7v0pISDjsebxer7zen0KJ/Pz8atXh8bRUVr9l8vkPVuu44+F2pcrjaVlr/QEAUBts25btCAUbDtWtURGu8sXDjTiVBoKKd5oxrggAAAAAgIYnZsHG/v37FQwGlZ6eHrE9PT1dX375ZVT6sCxLd955p84++2z16NEjvP13v/ud2rVrp5YtW2rTpk265557tG3btogplX5p6tSpmjJlynHV4/G0JGgAAOA4eQM+yVE2FMKqW2tsxJUFG5JU6C9VE487htUAAAAAANAwxXQqqpo2duxYff755/rwww8jtv/hD38IP+/Zs6datGihCy64QN9++606duxY6bkmTpyoCRMmhF/n5+erTZs2NVM4AAA4rIKCstGPtl+qYyM24mSF6nK4dKg4T20aJ8W6JAAAAAAAGpyY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cO6553LvvfeyZcsWpk+f3lzhCSHEUaNfv36sW7eON998s0mVl86dOzNq1Cjee+89ysrKmjFCcbSQxIY4ZNasWcPvfvc7zj//fB555BE++OADAN544w10XWfYsGHs2LEjXmqlrq6O7OxssrKymjNsIYQ4okpKSli0aBHz5s2Lj0CZNGkS5557LuPHj+ezzz7DMIz4+vn5+eTk5BAOh5srZCGEOOS2bdvGqlWr4vedTidjxozh+++/5//+7/8wDCM+arljx444nU7Wr18PIEleIcQxJxqN4nK5OO200/j0009ZunRp/DGHw8Ho0aNp3779XoNchBDieLdz507ef/99Zs2axfLlywG49NJLueCCC7jzzjuZNWsWVVVV8fX79etHXl6enB8LQBIb4hBZs2YNgwcPpqSkhJSUFGbPns3tt9/Oo48+Sk5ODm+//TaGYXDaaafx3HPP8dZbb/Hwww+zdetW+vXr19zhCyHEEbFixQqGDh3KjTfeyFlnncWNN97IF198AcDMmTM5/fTTufDCC3nppZfYuHEjuq7z3//+F1VVcTqdzRy9EEIcGjt27KBt27aMHDkyfgJrt9u56aab6NixI2+88QbTpk2Lr6+qKnl5eSQnJ2NZlszYEEIcE1auXMldd90FxI5xDoeDO++8kzVr1vDAAw/Ek7UQS+6eccYZbN68WXpQCiFOGCtWrOCUU07hoYceYvz48UycOJHXXnsNgCeeeIKrrrqKO+64g8cff5zvvvuOqqoqXnzxRaLRKKmpqc0cvTgaKJacGYifyTRNJk2aRGlpKa+++iqKorBhwwZee+01nnnmGW655RYmT55MNBrlmmuuYcWKFVRXV5ORkcFzzz1Hnz59mnsXhBDisNuwYQOnn346V111Fb/5zW/YsWMHV199NaNGjWLq1Knx9W6++WY+/vhjysvL6dixIxs2bOCTTz6hd+/ezRe8EEIcQqWlpYwYMQK/3099fT3vvfce3bt3x2azUVVVxf33388XX3yBz+fjggsuYNWqVbz55pssWrSIzp07N3f4QgjxgyKRCN26daOgoIArrriCl19+Of7YsmXLGDp0KEOGDOHmm2/mrLPOAuCGG26gsLCQN998Uwa0CCGOewUFBZxxxhlcdtll3H333RQWFnLfffeRnp7OjBkz4us9/PDDzJ07l8WLF9OtWzd27tzJ3Llz5Vqi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55xzePbZZ+NNf4QQ4kR25513MmTIEM4//3xgV/+N559/njFjxjRzdEIIcXiYpsmZZ55JRkYG//d//0d6enp8sMvOnTu57LLLGDJkCFOmTJFm4UKIY5bf7ychISF+/1//+he/+tWvuO2227j77rtJS0tD13W2b99OmzZtmi9QIYQ4CjQmL7799lsuvfRSevXqxZ133kn//v3505/+RIcOHfjVr37V3GGK45CUohJNnHHGGcyePZtLLrmEoqIixowZQ8+ePZk5cyalpaUyrVYIccIxDCPeN2P3+9OmTQN2leVLTk6ma9euZGVlNVeoQghx2KmqyiWXXMLMmTN5+umnmTRpUnxmWk5ODl6vl7Vr1zapqSyEEMeaxqSGYRioqsrYsWOxLItLL70URVGYOHEijz32GFu3bmXmzJl4PB455gkhTgh7nh+bpondbsc0TfLz83n99df51a9+xZ///Gei0SgfffQR3377bTNGLI5nktgQexk5ciRff/01kyZN4q677kLTNGw2G++99x4tW7Zs7vCEEOKIaByBbLPZsCyLBQsWMHjw4PiHuMbHG0cjP/vsswQCAU466aTmDFsIIQ65xgRu49cbb7yRTZs2MXfuXAKBAPfee2+8KXhqaiqJiYnxi4FyoU8IcSxr/Bxomibjxo1DURSuuOIK5syZQ0FBAd9++22TmR1CCHG82/P8uPF8uPGzYv/+/XnllVcYPHgwycnJfP3119JTQxw2UopK7FdtbS2VlZXU1dWRnZ0t9UKFECeEffXFuPrqq/nyyy955ZVXGDhwYJPH1q1bx4svvsjf//53Pv/883iNUSGEOJ5YlsUNN9zAmWeeGS+3N2XKFD788EMqKioYOXIk27dvZ+7cuSxcuFBOYIUQx5XGyyaKonDmmWeydOlSPv/8c3r06NHMkQkhxJGj6zqaph3w/DgUCnHnnXcyc+ZMvv76a+m7Jg4rmbEh9isxMVGa+gghTihLly7l5ptvZvr06fTs2TO+/K677sLhcNC5c+cm62/YsIFp06axatUqSWoIIY5r33//Pd999x0Oh4ORI0fidruZMmUKZ555Jv/9739Zu3YtmZmZLFiwQJIaQojjjqIoGIbBHXfcwWeffcbSpUslqSGEOO5VVFRQVlZGdXU1AwcORNNil5H3d34MsR6977//Ph9++KEkNcRhJzM2hBBCCGDZsmXk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\",\n      \"text/plain\": [\n       \"<Figure size 1600x600 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"file_path = '/mnt/large/data/PseudoPFLOW/activity/1/person_01101_student.csv'\\n\",\n    \"visualize_activity_ratios(file_path)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 43,\n   \"id\": \"5696a0f1-4121-46f9-bd6a-891b2f1dac5e\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def calculate_activity_ratios(file_path):\\n\",\n    \"    data = pd.read_csv(file_path, names=['id', 'age', 'gender', 'occupation', 'starttime', 'duration', 'activity', 'lon', 'lat', 'citycode'], header=None, skiprows=1)\\n\",\n    \"    data['starttime_formatted'] = data['starttime'].apply(lambda x: (datetime.min + timedelta(seconds=x)).time())\\n\",\n    \"    \\n\",\n    \"    midnight_data = data[data['starttime_formatted'] == datetime.strptime(\\\"00:00\\\", \\\"%H:%M\\\").time()]\\n\",\n    \"    for minutes in range(15, 166, 15):\\n\",\n    \"        fill_time = (datetime.min + timedelta(minutes=minutes)).time()\\n\",\n    \"        fill_data = midnight_data.copy()\\n\",\n    \"        fill_data['starttime_formatted'] = fill_time\\n\",\n    \"        data = pd.concat([data, fill_data])\\n\",\n    \"        \\n\",\n    \"    grouped_data = data.groupby(['starttime_formatted', 'activity'])['id'].nunique().unstack(fill_value=0)\\n\",\n    \"    population_per_time = len(data['id'].unique())\\n\",\n    \"    activity_ratios = grouped_data.div(population_per_time, axis=0)[[2,3,100,200,300,400,500]]\\n\",\n    \"    \\n\",\n    \"    return activity_ratios\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 44,\n   \"id\": \"8a6b60e5-c472-40eb-ae1b-d32db2a17571\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"file_path1 = '/mnt/large/data/PseudoPFLOW/activity/13/person_13101_labor.csv'  # Replace with the actual path of the first file\\n\",\n    \"file_path2 = '/mnt/large/data/PseudoPFLOW/activity/13_2018/person_13101_labor.csv'  # Replace with the actual path of the second file\\n\",\n    \"\\n\",\n    \"activity_ratios_1 = calculate_activity_ratios(file_path1)\\n\",\n    \"activity_ratios_2 = calculate_activity_ratios(file_path2)\\n\",\n    \"\\n\",\n    \"# Calculate the differences\\n\",\n    \"differences = activity_ratios_1 - activity_ratios_2\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 46,\n   \"id\": \"74804817-80d5-40c9-b8d7-f5fb7dee34f2\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 1600x600 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.figure(figsize=(16, 6))\\n\",\n    \"differences.plot(kind='line', ax=plt.gca(), colormap='tab20')  # Changed from 'area' to 'line'\\n\",\n    \"plt.title('Differences in Activity Ratios Over Time')\\n\",\n    \"plt.xlabel('Start Time (HH:MM)')\\n\",\n    \"plt.ylabel('Difference in Activity Ratio')\\n\",\n    \"plt.axhline(0, color='gray', lw=0.8)  # Adds a horizontal line at y=0 for reference\\n\",\n    \"plt.xticks(rotation=45)\\n\",\n    \"plt.legend(title='Activity', loc='upper left')\\n\",\n    \"plt.tight_layout()\\n\",\n    \"plt.show()\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"5bd384f9-60cd-4c15-a986-2458a6a864b6\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Outing Ratio and Average Trips\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"id\": \"372e06fe-d895-4852-ba71-1e7285b006fe\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(200343, 190959)\"\n      ]\n     },\n     \"execution_count\": 24,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"pop_root = '/Users/pang/Data/PseudoPFLOW/agent/person_12101.csv' \\n\",\n    \"act_root = '/Users/pang/Data/PseudoPFLOW/Activity1.2/12/activity_12101.csv'\\n\",\n    \"\\n\",\n    \"pop = pd.read_csv(pop_root)\\n\",\n    \"act = pd.read_csv(act_root, names=['pid', 'age', 'gender', 'occupation', 'starttime', 'duration', 'purpose', 'lon', 'lat', 'zcode'])\\n\",\n    \"\\n\",\n    \"len(pop), len(act.groupby('pid'))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 30,\n   \"id\": \"f59a0883-14e3-414c-a81c-7589236e4afc\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Pref: 03 Outing ratio: 0.7634872510881948 Average Trips: 2.9062619337163866\\n\",\n      \"Pref: 04 Outing ratio: 0.7557351245685252 Average Trips: 2.8846002330379945\\n\",\n      \"Pref: 32 Outing ratio: 0.7623788753594702 Average Trips: 2.9068862882540736\\n\",\n      \"Pref: 35 Outing ratio: 0.749055488485288 Average Trips: 2.8661859718481764\\n\",\n      \"Pref: 34 Outing ratio: 0.7604048467672293 Average Trips: 2.9021845067146943\\n\",\n      \"Pref: 33 Outing ratio: 0.7586629079276161 Average Trips: 2.8945656617625866\\n\",\n      \"Pref: 05 Outing ratio: 0.7459184914780695 Average Trips: 2.8486330628580965\\n\",\n      \"Pref: 02 Outing ratio: 0.7518640308498782 Average Trips: 2.8693415532367843\\n\",\n      \"Pref: 20 Outing ratio: 0.7700931287675604 Average Trips: 2.9310123223034714\\n\",\n      \"Pref: 18 Outing ratio: 0.7723401736025721 Average Trips: 2.9382033656154487\\n\",\n      \"Pref: 27 Outing ratio: 0.7542670042503783 Average Trips: 2.8810639811188556\\n\",\n      \"Pref: 11 Outing ratio: 0.7624134609435952 Average Trips: 2.9106514948221434\\n\",\n      \"Pref: 29 Outing ratio: 0.7457721468086479 Average Trips: 2.851475603662864\\n\",\n      \"Pref: 16 Outing ratio: 0.7716713701122573 Average Trips: 2.9341793441603987\\n\",\n      \"Pref: 42 Outing ratio: 0.7521200521441651 Average Trips: 2.8732504954449207\\n\",\n      \"Pref: 45 Outing ratio: 0.7557439907001162 Average Trips: 2.884346758165523\\n\",\n      \"Pref: 28 Outing ratio: 0.7566547879987136 Average Trips: 2.8908377293261633\\n\",\n      \"Pref: 17 Outing ratio: 0.7715779309188793 Average Trips: 2.9374723039790434\\n\",\n      \"Pref: 10 Outing ratio: 0.7635197346641507 Average Trips: 2.909312721389082\\n\",\n      \"Pref: 19 Outing ratio: 0.7633541385053365 Average Trips: 2.90833387460278\\n\",\n      \"Pref: 26 Outing ratio: 0.7589008399821441 Average Trips: 2.894674506919164\\n\",\n      \"Pref: 21 Outing ratio: 0.7689081077169981 Average Trips: 2.929189248398887\\n\",\n      \"Pref: 44 Outing ratio: 0.7546397057844934 Average Trips: 2.878965277069202\\n\",\n      \"Pref: 43 Outing ratio: 0.7613088279962814 Average Trips: 2.9001782213304126\\n\",\n      \"Pref: 07 Outing ratio: 0.7629498689441719 Average Trips: 2.904701517749779\\n\",\n      \"Pref: 38 Outing ratio: 0.7505821696140941 Average Trips: 2.8691163669640134\\n\",\n      \"Pref: 36 Outing ratio: 0.7507391210408138 Average Trips: 2.8686935403145744\\n\",\n      \"Pref: 09 Outing ratio: 0.7642195821722426 Average Trips: 2.915099881280195\\n\",\n      \"Pref: 31 Outing ratio: 0.7646573956925425 Average Trips: 2.9140722156932264\\n\",\n      \"Pref: 30 Outing ratio: 0.7520573533533021 Average Trips: 2.873937491408825\\n\",\n      \"Pref: 37 Outing ratio: 0.75845957003175 Average Trips: 2.8934535938627115\\n\",\n      \"Pref: 08 Outing ratio: 0.757872430169835 Average Trips: 2.893461672846162\\n\",\n      \"Pref: 01 Outing ratio: 0.7534377094676833 Average Trips: 2.8822067268870857\\n\",\n      \"Pref: 06 Outing ratio: 0.7653785848420208 Average Trips: 2.9140704479571187\\n\",\n      \"Pref: 39 Outing ratio: 0.7495330957755193 Average Trips: 2.8615356852320772\\n\",\n      \"Pref: 46 Outing ratio: 0.751169364877769 Average Trips: 2.8708098415109564\\n\",\n      \"Pref: 41 Outing ratio: 0.7638364034242752 Average Trips: 2.9100757272632967\\n\",\n      \"Pref: 24 Outing ratio: 0.7622524948429676 Average Trips: 2.9100690177437976\\n\",\n      \"Pref: 23 Outing ratio: 0.7736330712054147 Average Trips: 2.94786665117142\\n\",\n      \"Pref: 15 Outing ratio: 0.7672678587588968 Average Trips: 2.921577525920642\\n\",\n      \"Pref: 12 Outing ratio: 0.7605331296145812 Average Trips: 2.9054390711001714\\n\",\n      \"Pref: 40 Outing ratio: 0.755095935182559 Average Trips: 2.883416824716545\\n\",\n      \"Pref: 47 Outing ratio: 0.7583435554465197 Average Trips: 2.8894418903976136\\n\",\n      \"Pref: 13 Outing ratio: 0.7644990836132183 Average Trips: 2.9193303750063238\\n\",\n      \"Pref: 14 Outing ratio: 0.7663120556674554 Average Trips: 2.9260600244529247\\n\",\n      \"Pref: 22 Outing ratio: 0.7629831811026049 Average Trips: 2.9100820100454943\\n\",\n      \"Pref: 25 Outing ratio: 0.7699071784272096 Average Trips: 2.933513749730923\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"root = '/Users/pang/Data/PseudoPFLOW/'\\n\",\n    \"for pref in os.listdir(f'{root}Activity1.2/'):\\n\",\n    \"    out, trips, pop = 0, 0, 0\\n\",\n    \"    if pref == '.DS_Store':\\n\",\n    \"        continue\\n\",\n    \"    for filename in os.listdir(f'{root}Activity1.2/{pref}/'):\\n\",\n    \"        df = pd.read_csv(f'{root}Activity1.2/{pref}/{filename}', names=['pid', 'age', 'gender', 'occupation', 'starttime', 'duration', 'purpose', 'lon', 'lat', 'zcode'])\\n\",\n    \"        grouped_df = df.groupby(\\\"pid\\\")\\n\",\n    \"        df_pop = pd.read_csv(f'{root}agent/{pref}/person_{filename[9:]}')\\n\",\n    \"        pop += len(df_pop)\\n\",\n    \"        for pid, person in grouped_df:\\n\",\n    \"            if len(person) == 1 and person['duration'].iloc[0] == 86400:\\n\",\n    \"                continue\\n\",\n    \"            trips += len(person)\\n\",\n    \"            out += 1\\n\",\n    \"    print(f'Pref: {pref} Outing ratio: {out / pop} Average Trips: {trips / pop} Pop: {pop}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"id\": \"45b86f7e-1bd8-481d-ab3d-4cc466b2e97f\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Pref: 13 Outing ratio: 0.6486207227945415 Average Trips: 2.0686182864535243\\n\",\n      \"Pref: 1 Outing ratio: 0.7457627991015228 Average Trips: 2.3444407713653304\\n\",\n      \"Pref: 36 Outing ratio: 0.617425849687916 Average Trips: 1.866320518509641\\n\",\n      \"Pref: 14 Outing ratio: 0.642772719828285 Average Trips: 2.0386296795773298\\n\",\n      \"Pref: 31 Outing ratio: 0.6381341450505199 Average Trips: 1.95522449323485\\n\",\n      \"Pref: 37 Outing ratio: 0.6231421597835087 Average Trips: 1.9005630456777665\\n\",\n      \"Pref: 34 Outing ratio: 0.6185262966157539 Average Trips: 1.8922420027965434\\n\",\n      \"Pref: 40 Outing ratio: 0.621875020302217 Average Trips: 1.904614062977102\\n\",\n      \"Pref: 26 Outing ratio: 0.621006923459582 Average Trips: 1.9048865842259541\\n\",\n      \"Pref: 6 Outing ratio: 0.7530189435446177 Average Trips: 2.3779183305966614\\n\",\n      \"Pref: 7 Outing ratio: 0.7565282384574992 Average Trips: 2.3877348806894494\\n\",\n      \"Pref: 28 Outing ratio: 0.6126160177683672 Average Trips: 1.8684787165822498\\n\",\n      \"Pref: 17 Outing ratio: 0.8600539235932702 Average Trips: 2.9661076740876426\\n\",\n      \"Pref: 3 Outing ratio: 0.7558630919474888 Average Trips: 2.385574186251075\\n\",\n      \"Pref: 30 Outing ratio: 0.6121044275707452 Average Trips: 1.8404953563512232\\n\",\n      \"Pref: 43 Outing ratio: 0.6373190938890679 Average Trips: 1.953665289331162\\n\",\n      \"Pref: 2 Outing ratio: 0.7467378901206322 Average Trips: 2.3494108863356034\\n\",\n      \"Pref: 46 Outing ratio: 0.6144559620956886 Average Trips: 1.862291142224825\\n\",\n      \"Pref: 12 Outing ratio: 0.636645639806581 Average Trips: 1.9995730515593837\\n\",\n      \"Pref: 10 Outing ratio: 0.647756639746637 Average Trips: 2.039963891495957\\n\",\n      \"Pref: 42 Outing ratio: 0.6159429369473023 Average Trips: 1.8741781272321694\\n\",\n      \"Pref: 11 Outing ratio: 0.6426905826828464 Average Trips: 2.0290046907754027\\n\",\n      \"Pref: 19 Outing ratio: 0.8565720852117034 Average Trips: 2.9116341082530424\\n\",\n      \"Pref: 22 Outing ratio: 0.8523954125188394 Average Trips: 2.9163249416215016\\n\",\n      \"Pref: 47 Outing ratio: 0.6360738290599394 Average Trips: 1.9588801222435526\\n\",\n      \"Pref: 32 Outing ratio: 0.6270878059917842 Average Trips: 1.9066861118534815\\n\",\n      \"Pref: 16 Outing ratio: 0.6586806585283389 Average Trips: 2.0899297137430346\\n\",\n      \"Pref: 33 Outing ratio: 0.6191177607619637 Average Trips: 1.8828309183428757\\n\",\n      \"Pref: 4 Outing ratio: 0.7496352195459766 Average Trips: 2.3551680294831505\\n\",\n      \"Pref: 20 Outing ratio: 0.8592009488965112 Average Trips: 2.945475188852099\\n\",\n      \"Pref: 21 Outing ratio: 0.8558696017023174 Average Trips: 2.9112120681269977\\n\",\n      \"Pref: 8 Outing ratio: 0.6211152058042063 Average Trips: 1.7603778730727957\\n\",\n      \"Pref: 18 Outing ratio: 0.8611000524496515 Average Trips: 2.970503390269642\\n\",\n      \"Pref: 27 Outing ratio: 0.6178413995959707 Average Trips: 1.9027344739197143\\n\",\n      \"Pref: 45 Outing ratio: 0.6268863754327727 Average Trips: 1.9187716386326952\\n\",\n      \"Pref: 25 Outing ratio: 0.6240808856837413 Average Trips: 1.8564732102411712\\n\",\n      \"Pref: 29 Outing ratio: 0.5915602921718295 Average Trips: 1.7432575204842622\\n\",\n      \"Pref: 39 Outing ratio: 0.6138835043260366 Average Trips: 1.8159019836954686\\n\",\n      \"Pref: 41 Outing ratio: 0.6310021549463362 Average Trips: 1.881573860111314\\n\",\n      \"Pref: 44 Outing ratio: 0.6165421544382098 Average Trips: 1.8383880778196047\\n\",\n      \"Pref: 9 Outing ratio: 0.6285363880927681 Average Trips: 1.7770257541238499\\n\",\n      \"Pref: 24 Outing ratio: 0.8417694474921846 Average Trips: 2.703467440026906\\n\",\n      \"Pref: 35 Outing ratio: 0.598120205235336 Average Trips: 1.7610795675095807\\n\",\n      \"Pref: 23 Outing ratio: 0.8531317674751294 Average Trips: 2.8369373197113132\\n\",\n      \"Pref: 5 Outing ratio: 0.733914089037184 Average Trips: 2.30709111131151\\n\",\n      \"Pref: 15 Outing ratio: 0.6504314166079526 Average Trips: 2.0159797642548383\\n\",\n      \"Pref: 38 Outing ratio: 0.6046054636021266 Average Trips: 1.8047653730288504\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"root = '/mnt/large/data/PseudoPFLOW/'\\n\",\n    \"for pref in os.listdir(f'{root}activity_merge2/'):\\n\",\n    \"    out, trips, pop = 0, 0, 0\\n\",\n    \"    if pref == '.DS_Store':\\n\",\n    \"        continue\\n\",\n    \"    for filename in os.listdir(f'{root}activity_merge2/{pref}/'):\\n\",\n    \"        df = pd.read_csv(f'{root}activity_merge2/{pref}/{filename}', names=['pid', 'age', 'gender', 'occupation', 'starttime', 'duration', 'purpose', 'lon', 'lat', 'zcode'])\\n\",\n    \"        grouped_df = df.groupby(\\\"pid\\\")\\n\",\n    \"        # df_pop = pd.read_csv(f'{root}agent/{pref}/person_{filename[9:]}')\\n\",\n    \"        pop += len(grouped_df)\\n\",\n    \"        for pid, person in grouped_df:\\n\",\n    \"            if len(person) == 1 and person['duration'].iloc[0] == 86400:\\n\",\n    \"                continue\\n\",\n    \"            trips += len(person)\\n\",\n    \"            out += 1\\n\",\n    \"    print(f'Pref: {pref} Outing ratio: {out / pop} Average Trips: {trips / pop} Pop: {pop}')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"8d91628f-f587-48c9-8b6b-b93dc15a047e\",\n   \"metadata\": {},\n   \"source\": [\n    \"### out, trips, pop\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"id\": \"75703b56-46e6-46f7-a4b8-7bfa6e256fe7\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(0.7991595371845197, 3.058837071515299)\"\n      ]\n     },\n     \"execution_count\": 13,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"out / pop, trips / pop\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"3160050b-de3c-45da-9349-f654993e4d45\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Transport Mode\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"id\": \"67b104a7-92df-41ae-9350-5cca2d0da970\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>pid</th>\\n\",\n       \"      <th>age</th>\\n\",\n       \"      <th>gender</th>\\n\",\n       \"      <th>occupation</th>\\n\",\n       \"      <th>starttime</th>\\n\",\n       \"      <th>duration</th>\\n\",\n       \"      <th>purpose</th>\\n\",\n       \"      <th>lon</th>\\n\",\n       \"      <th>lat</th>\\n\",\n       \"      <th>zcode</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>37219382</td>\\n\",\n       \"      <td>39</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>26100</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>139.673322</td>\\n\",\n       \"      <td>35.639074</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>37219382</td>\\n\",\n       \"      <td>39</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>26100</td>\\n\",\n       \"      <td>9000</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>139.673322</td>\\n\",\n       \"      <td>35.639074</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>37219382</td>\\n\",\n       \"      <td>39</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>35100</td>\\n\",\n       \"      <td>23400</td>\\n\",\n       \"      <td>500</td>\\n\",\n       \"      <td>139.672192</td>\\n\",\n       \"      <td>35.640694</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>37219382</td>\\n\",\n       \"      <td>39</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>58500</td>\\n\",\n       \"      <td>8100</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>139.673322</td>\\n\",\n       \"      <td>35.639074</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>37219382</td>\\n\",\n       \"      <td>39</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>66600</td>\\n\",\n       \"      <td>19800</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>139.673322</td>\\n\",\n       \"      <td>35.639074</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2789363</th>\\n\",\n       \"      <td>38110598</td>\\n\",\n       \"      <td>18</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>16</td>\\n\",\n       \"      <td>30600</td>\\n\",\n       \"      <td>44100</td>\\n\",\n       \"      <td>400</td>\\n\",\n       \"      <td>139.615728</td>\\n\",\n       \"      <td>35.664552</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2789364</th>\\n\",\n       \"      <td>38110598</td>\\n\",\n       \"      <td>18</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>16</td>\\n\",\n       \"      <td>74700</td>\\n\",\n       \"      <td>11700</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>139.592990</td>\\n\",\n       \"      <td>35.681222</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2789365</th>\\n\",\n       \"      <td>38110599</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>28800</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>139.592990</td>\\n\",\n       \"      <td>35.681222</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2789366</th>\\n\",\n       \"      <td>38110599</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"      <td>28800</td>\\n\",\n       \"      <td>35100</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>139.599475</td>\\n\",\n       \"      <td>35.674012</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2789367</th>\\n\",\n       \"      <td>38110599</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"      <td>63900</td>\\n\",\n       \"      <td>22500</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>139.592990</td>\\n\",\n       \"      <td>35.681222</td>\\n\",\n       \"      <td>13112</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>2789368 rows × 10 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"              pid  age  gender  occupation  starttime  duration  purpose  \\\\\\n\",\n       \"0        37219382   39       1          21          0     26100        1   \\n\",\n       \"1        37219382   39       1          21      26100      9000        2   \\n\",\n       \"2        37219382   39       1          21      35100     23400      500   \\n\",\n       \"3        37219382   39       1          21      58500      8100        2   \\n\",\n       \"4        37219382   39       1          21      66600     19800        1   \\n\",\n       \"...           ...  ...     ...         ...        ...       ...      ...   \\n\",\n       \"2789363  38110598   18       1          16      30600     44100      400   \\n\",\n       \"2789364  38110598   18       1          16      74700     11700        1   \\n\",\n       \"2789365  38110599   11       2          12          0     28800        1   \\n\",\n       \"2789366  38110599   11       2          12      28800     35100        3   \\n\",\n       \"2789367  38110599   11       2          12      63900     22500        1   \\n\",\n       \"\\n\",\n       \"                lon        lat  zcode  \\n\",\n       \"0        139.673322  35.639074  13112  \\n\",\n       \"1        139.673322  35.639074  13112  \\n\",\n       \"2        139.672192  35.640694  13112  \\n\",\n       \"3        139.673322  35.639074  13112  \\n\",\n       \"4        139.673322  35.639074  13112  \\n\",\n       \"...             ...        ...    ...  \\n\",\n       \"2789363  139.615728  35.664552  13112  \\n\",\n       \"2789364  139.592990  35.681222  13112  \\n\",\n       \"2789365  139.592990  35.681222  13112  \\n\",\n       \"2789366  139.599475  35.674012  13112  \\n\",\n       \"2789367  139.592990  35.681222  13112  \\n\",\n       \"\\n\",\n       \"[2789368 rows x 10 columns]\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"walk, bike, car, train = 0, 0, 0, 0\\n\",\n    \"\\n\",\n    \"trip = pd.read_csv('/Users/pang/Data/PseudoPFLOW/Trip/01/trip_01101.csv')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"5404597e-1340-443d-b70d-ec4631ee2613\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.2\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/scripts/Evaluate_Activity.ipynb b/src/scripts/Evaluate_Activity.ipynb
--- a/src/scripts/Evaluate_Activity.ipynb	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/scripts/Evaluate_Activity.ipynb	(date 1733924874671)
@@ -705,7 +705,14 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.2"
+   "version": "3.11.7"
+  },
+  "widgets": {
+   "application/vnd.jupyter.widget-state+json": {
+    "state": {},
+    "version_major": 2,
+    "version_minor": 0
+   }
   }
  },
  "nbformat": 4,
Index: src/scripts/Activity_Data_Completion.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/scripts/Activity_Data_Completion.ipynb b/src/scripts/Activity_Data_Completion.ipynb
new file mode 100644
--- /dev/null	(date 1733828828451)
+++ b/src/scripts/Activity_Data_Completion.ipynb	(date 1733828828451)
@@ -0,0 +1,1477 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "id": "9e8eb7a4-f979-439e-9957-7c43736d1dd4",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import os \n",
+    "import pandas as pd"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "id": "1600d614-4361-4cde-857a-84ff19687770",
+   "metadata": {
+    "collapsed": true,
+    "jupyter": {
+     "outputs_hidden": true
+    }
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08310.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08310.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08546.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08546.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08542.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08542.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08228.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08228.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08225.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08225.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08232.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08232.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08221.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08221.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08309.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08309.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08341.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08341.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08443.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08443.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08212.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08212.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08222.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08222.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08219.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08219.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08227.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08227.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08215.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08215.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08214.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08214.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08226.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08226.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08203.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08203.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08205.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08205.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08217.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08217.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08211.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08211.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08223.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08223.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08235.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08235.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08229.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08229.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08564.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08564.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08224.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08224.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08210.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08210.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08201.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08201.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08442.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08442.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08364.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08364.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08236.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08236.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08216.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08216.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08202.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08202.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08521.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08521.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08204.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08204.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08208.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08208.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08220.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08220.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08302.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08302.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08231.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08231.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08233.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08233.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08234.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08234.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08230.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08230.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08447.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08447.csv\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/tmp/ipykernel_594577/2168292869.py:21: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "File activity_08207.csv processed and saved to /mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08207.csv\n",
+      "All files have been processed.\n"
+     ]
+    }
+   ],
+   "source": [
+    "prev_dir = \"/mnt/large/data/PseudoPFLOW/ver2.0/activity/8/\"\n",
+    "processed_dir = \"/mnt/free/owner/activity_merge/8/\"\n",
+    "output_dir = \"/mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/\"\n",
+    "\n",
+    "os.makedirs(output_dir, exist_ok=True)\n",
+    "\n",
+    "for file_name in os.listdir(prev_dir):\n",
+    "    if file_name.endswith(\".csv\"):\n",
+    "        prev_file_path = os.path.join(prev_dir, file_name)\n",
+    "        processed_file_path = os.path.join(processed_dir, file_name)\n",
+    "        \n",
+    "        # Check if the corresponding file exists in processed_dir\n",
+    "        if not os.path.exists(processed_file_path):\n",
+    "            print(f\"File {processed_file_path} does not exist. Skipping...\")\n",
+    "            continue\n",
+    "\n",
+    "        act_prev = pd.read_csv(prev_file_path, names=['pid', 'age', 'gender', 'occupation', 'starttime', 'duration', 'purpose', 'lon', 'lat', 'zone'])\n",
+    "        act_processed = pd.read_csv(processed_file_path, names=['pid', 'age', 'gender', 'occupation', 'starttime', 'duration', 'purpose', 'lon', 'lat', 'zone'])\n",
+    "\n",
+    "        last_rows = act_prev.groupby('pid').tail(1)\n",
+    "        last_rows['total_time'] = last_rows['starttime'] + last_rows['duration']\n",
+    "\n",
+    "        # Filter rows where total_time != 86400\n",
+    "        incomplete_days = last_rows[last_rows['total_time'] != 86400]\n",
+    "\n",
+    "        # Replace corresponding pid data in act_prev\n",
+    "        for _, row in incomplete_days.iterrows():\n",
+    "            pid = row['pid']\n",
+    "            matching_data = act_processed[act_processed['pid'] == pid]\n",
+    "            \n",
+    "            # Remove related data from act_prev and append the replacement data\n",
+    "            act_prev = act_prev[act_prev['pid'] != pid]\n",
+    "            act_prev = pd.concat([act_prev, matching_data], ignore_index=True)\n",
+    "\n",
+    "        output_file_path = os.path.join(output_dir, file_name)\n",
+    "        act_prev.to_csv(output_file_path, index=False, header=False)\n",
+    "        print(f\"File {file_name} processed and saved to {output_file_path}\")\n",
+    "\n",
+    "print(\"All files have been processed.\")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "8808b102-aa37-40a2-8658-689cf3c00caa",
+   "metadata": {},
+   "source": [
+    "## Missing people from household"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "id": "ee017205-d4b5-4db1-8063-633a1af546e7",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>household_id</th>\n",
+       "      <th>household_type</th>\n",
+       "      <th>city_code</th>\n",
+       "      <th>lon</th>\n",
+       "      <th>lat</th>\n",
+       "      <th>pid</th>\n",
+       "      <th>age</th>\n",
+       "      <th>gender</th>\n",
+       "      <th>occupation</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>08201_1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.474551</td>\n",
+       "      <td>36.377772</td>\n",
+       "      <td>13942524</td>\n",
+       "      <td>51</td>\n",
+       "      <td>1</td>\n",
+       "      <td>21</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>13</th>\n",
+       "      <td>08201_8</td>\n",
+       "      <td>3</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.474551</td>\n",
+       "      <td>36.377772</td>\n",
+       "      <td>13942537</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>10</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>16</th>\n",
+       "      <td>08201_11</td>\n",
+       "      <td>1</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.474551</td>\n",
+       "      <td>36.377772</td>\n",
+       "      <td>13942540</td>\n",
+       "      <td>51</td>\n",
+       "      <td>1</td>\n",
+       "      <td>22</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>26</th>\n",
+       "      <td>08201_17</td>\n",
+       "      <td>16</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.474551</td>\n",
+       "      <td>36.377772</td>\n",
+       "      <td>13942550</td>\n",
+       "      <td>48</td>\n",
+       "      <td>1</td>\n",
+       "      <td>22</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>31</th>\n",
+       "      <td>08201_22</td>\n",
+       "      <td>16</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.474551</td>\n",
+       "      <td>36.377772</td>\n",
+       "      <td>13942555</td>\n",
+       "      <td>44</td>\n",
+       "      <td>1</td>\n",
+       "      <td>22</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>262039</th>\n",
+       "      <td>08201_116023</td>\n",
+       "      <td>8</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.366842</td>\n",
+       "      <td>36.381044</td>\n",
+       "      <td>14204563</td>\n",
+       "      <td>21</td>\n",
+       "      <td>2</td>\n",
+       "      <td>22</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>262040</th>\n",
+       "      <td>08201_116023</td>\n",
+       "      <td>8</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.366842</td>\n",
+       "      <td>36.381044</td>\n",
+       "      <td>14204564</td>\n",
+       "      <td>21</td>\n",
+       "      <td>1</td>\n",
+       "      <td>15</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>262054</th>\n",
+       "      <td>08201_116028</td>\n",
+       "      <td>2</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.372789</td>\n",
+       "      <td>36.385777</td>\n",
+       "      <td>14204578</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>10</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>262070</th>\n",
+       "      <td>08201_116032</td>\n",
+       "      <td>7</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.366319</td>\n",
+       "      <td>36.385175</td>\n",
+       "      <td>14204594</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>10</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>262072</th>\n",
+       "      <td>08201_116032</td>\n",
+       "      <td>7</td>\n",
+       "      <td>8201</td>\n",
+       "      <td>140.366319</td>\n",
+       "      <td>36.385175</td>\n",
+       "      <td>14204596</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>10</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>13290 rows × 9 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "        household_id  household_type  city_code         lon        lat  \\\n",
+       "0            08201_1               1       8201  140.474551  36.377772   \n",
+       "13           08201_8               3       8201  140.474551  36.377772   \n",
+       "16          08201_11               1       8201  140.474551  36.377772   \n",
+       "26          08201_17              16       8201  140.474551  36.377772   \n",
+       "31          08201_22              16       8201  140.474551  36.377772   \n",
+       "...              ...             ...        ...         ...        ...   \n",
+       "262039  08201_116023               8       8201  140.366842  36.381044   \n",
+       "262040  08201_116023               8       8201  140.366842  36.381044   \n",
+       "262054  08201_116028               2       8201  140.372789  36.385777   \n",
+       "262070  08201_116032               7       8201  140.366319  36.385175   \n",
+       "262072  08201_116032               7       8201  140.366319  36.385175   \n",
+       "\n",
+       "             pid  age  gender  occupation  \n",
+       "0       13942524   51       1          21  \n",
+       "13      13942537    1       1          10  \n",
+       "16      13942540   51       1          22  \n",
+       "26      13942550   48       1          22  \n",
+       "31      13942555   44       1          22  \n",
+       "...          ...  ...     ...         ...  \n",
+       "262039  14204563   21       2          22  \n",
+       "262040  14204564   21       1          15  \n",
+       "262054  14204578    1       1          10  \n",
+       "262070  14204594    2       2          10  \n",
+       "262072  14204596    2       2          10  \n",
+       "\n",
+       "[13290 rows x 9 columns]"
+      ]
+     },
+     "execution_count": 5,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pop = pd.read_csv('/mnt/large/data/PseudoPFLOW/ver2.0/agent/8/person_08201.csv', names=['household_id', 'household_type', 'city_code', 'lon', 'lat', 'pid', 'age', 'gender', 'occupation'])\n",
+    "act = pd.read_csv(\"/mnt/free/owner/PseudoPFLOW/ver2.0/activity/8/updated/activity_08201.csv\", names=['pid', 'age', 'gender', 'occupation', 'starttime', 'duration', 'purpose', 'lon','lat', 'zone'])\n",
+    "pop_missing = pop[~pop['pid'].isin(act['pid'])]\n",
+    "pop_missing"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "id": "0ba56ed5-e32a-479e-bcc5-10c0c0b845f5",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "10    6336\n",
+       "22    5388\n",
+       "14     488\n",
+       "15     335\n",
+       "12     324\n",
+       "11     193\n",
+       "13     161\n",
+       "16      64\n",
+       "21       1\n",
+       "Name: occupation, dtype: int64"
+      ]
+     },
+     "execution_count": 10,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pop_missing['occupation'].value_counts()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "id": "2639ddd9-580f-4429-ae6e-3f92e580c846",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "21    111327\n",
+       "23     97039\n",
+       "12     14023\n",
+       "14      7815\n",
+       "13      7287\n",
+       "11      6698\n",
+       "10      6336\n",
+       "22      5388\n",
+       "15      5054\n",
+       "16      1120\n",
+       "Name: occupation, dtype: int64"
+      ]
+     },
+     "execution_count": 11,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pop['occupation'].value_counts()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "id": "a088e56d-1f99-46b6-9168-7396908f2243",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(262087, 248797)"
+      ]
+     },
+     "execution_count": 7,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "len(pop['pid'].unique()), len(act['pid'].unique())"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "id": "6623efa0-1fd8-4990-a20e-19807241e4f7",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>pid</th>\n",
+       "      <th>age</th>\n",
+       "      <th>gender</th>\n",
+       "      <th>occupation</th>\n",
+       "      <th>starttime</th>\n",
+       "      <th>duration</th>\n",
+       "      <th>purpose</th>\n",
+       "      <th>lon</th>\n",
+       "      <th>lat</th>\n",
+       "      <th>zone</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>13942525</td>\n",
+       "      <td>40</td>\n",
+       "      <td>2</td>\n",
+       "      <td>21</td>\n",
+       "      <td>0</td>\n",
+       "      <td>27000</td>\n",
+       "      <td>1</td>\n",
+       "      <td>140.474551</td>\n",
+       "      <td>36.377772</td>\n",
+       "      <td>8201</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>13942525</td>\n",
+       "      <td>40</td>\n",
+       "      <td>2</td>\n",
+       "      <td>21</td>\n",
+       "      <td>27000</td>\n",
+       "      <td>38700</td>\n",
+       "      <td>2</td>\n",
+       "      <td>140.484832</td>\n",
+       "      <td>36.314746</td>\n",
+       "      <td>8302</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>13942525</td>\n",
+       "      <td>40</td>\n",
+       "      <td>2</td>\n",
+       "      <td>21</td>\n",
+       "      <td>65700</td>\n",
+       "      <td>20700</td>\n",
+       "      <td>1</td>\n",
+       "      <td>140.474551</td>\n",
+       "      <td>36.377772</td>\n",
+       "      <td>8201</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>13942526</td>\n",
+       "      <td>37</td>\n",
+       "      <td>1</td>\n",
+       "      <td>21</td>\n",
+       "      <td>0</td>\n",
+       "      <td>26100</td>\n",
+       "      <td>1</td>\n",
+       "      <td>140.474551</td>\n",
+       "      <td>36.377772</td>\n",
+       "      <td>8201</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>13942526</td>\n",
+       "      <td>37</td>\n",
+       "      <td>1</td>\n",
+       "      <td>21</td>\n",
+       "      <td>26100</td>\n",
+       "      <td>45900</td>\n",
+       "      <td>2</td>\n",
+       "      <td>140.464704</td>\n",
+       "      <td>36.379213</td>\n",
+       "      <td>8201</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>598294</th>\n",
+       "      <td>14201508</td>\n",
+       "      <td>18</td>\n",
+       "      <td>1</td>\n",
+       "      <td>15</td>\n",
+       "      <td>0</td>\n",
+       "      <td>24300</td>\n",
+       "      <td>1</td>\n",
+       "      <td>140.525639</td>\n",
+       "      <td>36.345669</td>\n",
+       "      <td>8201</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>598295</th>\n",
+       "      <td>14201508</td>\n",
+       "      <td>18</td>\n",
+       "      <td>1</td>\n",
+       "      <td>15</td>\n",
+       "      <td>24300</td>\n",
+       "      <td>41400</td>\n",
+       "      <td>3</td>\n",
+       "      <td>140.438928</td>\n",
+       "      <td>36.381611</td>\n",
+       "      <td>8201</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>598296</th>\n",
+       "      <td>14201508</td>\n",
+       "      <td>18</td>\n",
+       "      <td>1</td>\n",
+       "      <td>15</td>\n",
+       "      <td>65700</td>\n",
+       "      <td>20700</td>\n",
+       "      <td>1</td>\n",
+       "      <td>140.525639</td>\n",
+       "      <td>36.345669</td>\n",
+       "      <td>8201</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>598297</th>\n",
+       "      <td>14204061</td>\n",
+       "      <td>16</td>\n",
+       "      <td>2</td>\n",
+       "      <td>14</td>\n",
+       "      <td>0</td>\n",
+       "      <td>27900</td>\n",
+       "      <td>1</td>\n",
+       "      <td>140.371839</td>\n",
+       "      <td>36.384464</td>\n",
+       "      <td>8201</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>598298</th>\n",
+       "      <td>14204061</td>\n",
+       "      <td>16</td>\n",
+       "      <td>2</td>\n",
+       "      <td>14</td>\n",
+       "      <td>27900</td>\n",
+       "      <td>58500</td>\n",
+       "      <td>3</td>\n",
+       "      <td>140.656013</td>\n",
+       "      <td>36.602564</td>\n",
+       "      <td>8202</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>598299 rows × 10 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "             pid  age  gender  occupation  starttime  duration  purpose  \\\n",
+       "0       13942525   40       2          21          0     27000        1   \n",
+       "1       13942525   40       2          21      27000     38700        2   \n",
+       "2       13942525   40       2          21      65700     20700        1   \n",
+       "3       13942526   37       1          21          0     26100        1   \n",
+       "4       13942526   37       1          21      26100     45900        2   \n",
+       "...          ...  ...     ...         ...        ...       ...      ...   \n",
+       "598294  14201508   18       1          15          0     24300        1   \n",
+       "598295  14201508   18       1          15      24300     41400        3   \n",
+       "598296  14201508   18       1          15      65700     20700        1   \n",
+       "598297  14204061   16       2          14          0     27900        1   \n",
+       "598298  14204061   16       2          14      27900     58500        3   \n",
+       "\n",
+       "               lon        lat  zone  \n",
+       "0       140.474551  36.377772  8201  \n",
+       "1       140.484832  36.314746  8302  \n",
+       "2       140.474551  36.377772  8201  \n",
+       "3       140.474551  36.377772  8201  \n",
+       "4       140.464704  36.379213  8201  \n",
+       "...            ...        ...   ...  \n",
+       "598294  140.525639  36.345669  8201  \n",
+       "598295  140.438928  36.381611  8201  \n",
+       "598296  140.525639  36.345669  8201  \n",
+       "598297  140.371839  36.384464  8201  \n",
+       "598298  140.656013  36.602564  8202  \n",
+       "\n",
+       "[598299 rows x 10 columns]"
+      ]
+     },
+     "execution_count": 8,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "act"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "8d616ebf-6c55-411b-9fe9-6b2ca39200b2",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3 (ipykernel)",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.11.7"
+  },
+  "widgets": {
+   "application/vnd.jupyter.widget-state+json": {
+    "state": {},
+    "version_major": 2,
+    "version_minor": 0
+   }
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>DSPFlow</groupId>\n  <artifactId>DSPFlow</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  \n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <geotools.version>26-SNAPSHOT</geotools.version>\n\t\t\n\t\t<java.version>1.8</java.version>\n        <maven.compiler.target>${java.version}</maven.compiler.target>\n        <maven.compiler.source>${java.version}</maven.compiler.source>\n\n    </properties>\n\n\n   \n  <dependencies>\n<!-- https://mvnrepository.com/artifact/org.geotools/geotools -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.geotools</groupId>\n            <artifactId>gt-shapefile</artifactId>\n            <version>${geotools.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.geotools</groupId>\n            <artifactId>gt-swing</artifactId>\n            <version>${geotools.version}</version>\n        </dependency>\n\t<dependency>\n\t\t<groupId>com.vividsolutions</groupId>\n\t\t<artifactId>jts</artifactId>\n\t\t<version>1.13</version>\n\t</dependency>\n\t<!-- https://mvnrepository.com/artifact/commons-lang/commons-lang -->\n\t<dependency>\n\t    <groupId>commons-lang</groupId>\n\t    <artifactId>commons-lang</artifactId>\n\t    <version>2.6</version>\n\t</dependency>\n\t\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-math</artifactId>\n\t\t\t<version>2.2</version>\n\t\t</dependency>\n      <dependency>\n          <groupId>org.apache.httpcomponents</groupId>\n          <artifactId>httpclient</artifactId>\n          <version>4.5.14</version> <!-- 将这里的版本号更新为最新版本 -->\n      </dependency>\n\t   \t<dependency>\n    <groupId>org.json</groupId>\n    <artifactId>json</artifactId>\n    <version>20200518</version>\n   </dependency>\n   \n   <dependency>\n\t<groupId>org.opentripplanner</groupId>\n\t<artifactId>otp</artifactId>\n\t<version>1.4.0</version>\n   </dependency>\n\t\n  </dependencies>\n      <repositories>\n      <repository>\n        <id>osgeo</id>\n        <name>OSGeo Release Repository</name>\n        <url>https://repo.osgeo.org/repository/release/</url>\n        <snapshots><enabled>false</enabled></snapshots>\n        <releases><enabled>true</enabled></releases>\n      </repository>\n      <repository>\n        <id>osgeo-snapshot</id>\n        <name>OSGeo Snapshot Repository</name>\n        <url>https://repo.osgeo.org/repository/snapshot/</url>\n        <snapshots><enabled>true</enabled></snapshots>\n        <releases><enabled>false</enabled></releases>\n      </repository>\n    </repositories>\n    \n    <build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<version>3.0</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>11</source>\n\t\t\t\t\t<target>11</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-assembly-plugin</artifactId>\n\t\t\t\t<version>3.1.0</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<descriptorRefs>\n\t\t\t\t\t\t<descriptorRef>jar-with-dependencies</descriptorRef>\n\t\t\t\t\t</descriptorRefs>\n\t\t\t\t</configuration>\n\t\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/pom.xml	(date 1728908565794)
@@ -3,12 +3,12 @@
   <groupId>DSPFlow</groupId>
   <artifactId>DSPFlow</artifactId>
   <version>0.0.1-SNAPSHOT</version>
-  
+
 
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <geotools.version>26-SNAPSHOT</geotools.version>
-		
+
 		<java.version>1.8</java.version>
         <maven.compiler.target>${java.version}</maven.compiler.target>
         <maven.compiler.source>${java.version}</maven.compiler.source>
@@ -16,9 +16,25 @@
     </properties>
 
 
-   
+
   <dependencies>
-<!-- https://mvnrepository.com/artifact/org.geotools/geotools -->
+
+      <!-- HttpClient for making HTTP requests -->
+      <dependency>
+          <groupId>org.apache.httpcomponents</groupId>
+          <artifactId>httpclient</artifactId>
+          <version>4.5.13</version>
+      </dependency>
+
+      <!-- Gson for JSON parsing -->
+      <dependency>
+          <groupId>com.google.code.gson</groupId>
+          <artifactId>gson</artifactId>
+          <version>2.8.8</version>
+      </dependency>
+
+
+      <!-- https://mvnrepository.com/artifact/org.geotools/geotools -->
         <dependency>
             <groupId>junit</groupId>
             <artifactId>junit</artifactId>
@@ -61,13 +77,13 @@
     <artifactId>json</artifactId>
     <version>20200518</version>
    </dependency>
-   
+
    <dependency>
 	<groupId>org.opentripplanner</groupId>
 	<artifactId>otp</artifactId>
 	<version>1.4.0</version>
    </dependency>
-	
+
   </dependencies>
       <repositories>
       <repository>
@@ -85,7 +101,7 @@
         <releases><enabled>false</enabled></releases>
       </repository>
     </repositories>
-    
+
     <build>
 		<plugins>
 			<plugin>
Index: src/scripts/.ipynb_checkpoints/Activity_Data_Completion-checkpoint.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/scripts/.ipynb_checkpoints/Activity_Data_Completion-checkpoint.ipynb b/src/scripts/.ipynb_checkpoints/Activity_Data_Completion-checkpoint.ipynb
new file mode 100644
--- /dev/null	(date 1733817631781)
+++ b/src/scripts/.ipynb_checkpoints/Activity_Data_Completion-checkpoint.ipynb	(date 1733817631781)
@@ -0,0 +1,6 @@
+{
+ "cells": [],
+ "metadata": {},
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
Index: src/scripts/Merge_ActivityData.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"id\": \"96c3f09d-60a1-4354-9373-bf199ae4d260\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"import pandas as pd\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"id\": \"6459d56e-e441-4b21-adf8-eadb1de4b8ec\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"root = \\\"/mnt/large/data/PseudoPFLOW/activity/\\\"\\n\",\n    \"out = '/mnt/large/data/PseudoPFLOW/activity_merge2/'\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"id\": \"90269ba9-9385-454d-8fa8-33d836da85e0\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"person_07545\\n\",\n      \"person_07564\\n\",\n      \"person_07548\\n\",\n      \"person_07546\\n\",\n      \"person_07543\\n\",\n      \"person_07547\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"for dir in os.listdir(root):\\n\",\n    \"    if not os.path.exists(out+'/'+dir+'/'):\\n\",\n    \"        os.mkdir(out+dir+'/')\\n\",\n    \"    filename = set([f[0:12] for f in os.listdir(root+\\\"/\\\"+dir)])\\n\",\n    \"    for f in filename:\\n\",\n    \"        if f == '.~lock.perso':\\n\",\n    \"            continue\\n\",\n    \"        if os.path.getsize(root+dir+'/'+f+'_labor.csv') < 137 or os.path.getsize(root+dir+'/'+f+'_nolabor.csv') < 137 or os.path.getsize(root+dir+'/'+f+'_student.csv') < 137:\\n\",\n    \"            print(f)\\n\",\n    \"        else:\\n\",\n    \"            df  = pd.read_csv(root+dir+'/'+f+'_labor.csv', header=None)\\n\",\n    \"            df2 = pd.read_csv(root+dir+'/'+f+'_nolabor.csv', header=None)\\n\",\n    \"            df3 = pd.read_csv(root+dir+'/'+f+'_student.csv', header=None)\\n\",\n    \"            pop = pd.concat([df, df2, df3], axis=0)\\n\",\n    \"            pop.to_csv(out+'/'+dir+'/'+'activity_'+f[7:12]+'.csv', index=False, header=False)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"3558bcf4-9214-4cb3-88ae-7a2385d8bf61\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.2\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/scripts/Merge_ActivityData.ipynb b/src/scripts/Merge_ActivityData.ipynb
--- a/src/scripts/Merge_ActivityData.ipynb	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/scripts/Merge_ActivityData.ipynb	(date 1733795259529)
@@ -13,18 +13,18 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 16,
    "id": "6459d56e-e441-4b21-adf8-eadb1de4b8ec",
    "metadata": {},
    "outputs": [],
    "source": [
-    "root = \"/mnt/large/data/PseudoPFLOW/activity/\"\n",
-    "out = '/mnt/large/data/PseudoPFLOW/activity_merge2/'"
+    "root = \"/mnt/free/owner/activity/\"\n",
+    "out = '/mnt/free/owner/activity_merge/'"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 18,
    "id": "90269ba9-9385-454d-8fa8-33d836da85e0",
    "metadata": {},
    "outputs": [
@@ -32,12 +32,50 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "person_07545\n",
-      "person_07564\n",
-      "person_07548\n",
-      "person_07546\n",
-      "person_07543\n",
-      "person_07547\n"
+      "person_08302\n",
+      "person_08442\n",
+      "person_08229\n",
+      "person_08202\n",
+      "person_08447\n",
+      "person_08230\n",
+      "person_08203\n",
+      "person_08207\n",
+      "person_08204\n",
+      "person_08542\n",
+      "person_08224\n",
+      "person_08235\n",
+      "person_08226\n",
+      "person_08232\n",
+      "person_08223\n",
+      "person_08222\n",
+      "person_08201\n",
+      "person_08205\n",
+      "person_08216\n",
+      "person_08221\n",
+      "person_08364\n",
+      "person_08309\n",
+      "person_08341\n",
+      "person_08211\n",
+      "person_08236\n",
+      "person_08443\n",
+      "person_08217\n",
+      "person_08231\n",
+      "person_08564\n",
+      "person_08215\n",
+      "person_08214\n",
+      "person_08310\n",
+      "person_08208\n",
+      "person_08225\n",
+      "person_08212\n",
+      "person_08219\n",
+      "person_08546\n",
+      "person_08228\n",
+      "person_08220\n",
+      "person_08210\n",
+      "person_08521\n",
+      "person_08234\n",
+      "person_08227\n",
+      "person_08233\n"
      ]
     }
    ],
@@ -47,6 +85,7 @@
     "        os.mkdir(out+dir+'/')\n",
     "    filename = set([f[0:12] for f in os.listdir(root+\"/\"+dir)])\n",
     "    for f in filename:\n",
+    "        print(f)\n",
     "        if f == '.~lock.perso':\n",
     "            continue\n",
     "        if os.path.getsize(root+dir+'/'+f+'_labor.csv') < 137 or os.path.getsize(root+dir+'/'+f+'_nolabor.csv') < 137 or os.path.getsize(root+dir+'/'+f+'_student.csv') < 137:\n",
@@ -84,7 +123,14 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.12.2"
+   "version": "3.11.7"
+  },
+  "widgets": {
+   "application/vnd.jupyter.widget-state+json": {
+    "state": {},
+    "version_major": 2,
+    "version_minor": 0
+   }
   }
  },
  "nbformat": 4,
Index: target/classes/scripts/household_data_mismatches.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/scripts/household_data_mismatches.log b/target/classes/scripts/household_data_mismatches.log
--- a/target/classes/scripts/household_data_mismatches.log	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/target/classes/scripts/household_data_mismatches.log	(date 1728910301452)
@@ -1,0 +1,2 @@
+2024-04-17 18:15:38,175 - ERROR - No such comm target registered: jupyter.widget.control
+2024-04-17 18:15:38,176 - WARNING - No such comm: 682b7175-78f2-4b68-8045-9c766df594ed
Index: src/scripts/household_data_mismatches.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/scripts/household_data_mismatches.log b/src/scripts/household_data_mismatches.log
--- a/src/scripts/household_data_mismatches.log	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/scripts/household_data_mismatches.log	(date 1713345338170)
@@ -1,0 +1,2 @@
+2024-04-17 18:15:38,175 - ERROR - No such comm target registered: jupyter.widget.control
+2024-04-17 18:15:38,176 - WARNING - No such comm: 682b7175-78f2-4b68-8045-9c766df594ed
Index: src/pseudo/gen/ActGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pseudo.gen;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\nimport org.jboss.netty.util.internal.ThreadLocalRandom;\r\n\r\nimport jp.ac.ut.csis.pflow.geom.DistanceUtils;\r\nimport jp.ac.ut.csis.pflow.geom2.ILonLat;\r\nimport jp.ac.ut.csis.pflow.routing4.logic.Dijkstra;\r\nimport pseudo.acs.MNLParamAccessor;\r\nimport pseudo.acs.MkChainAccessor;\r\nimport pseudo.res.Activity;\r\nimport pseudo.res.City;\r\nimport pseudo.res.ECity;\r\nimport pseudo.res.EGender;\r\nimport pseudo.res.ELabor;\r\nimport pseudo.res.EMarkov;\r\nimport pseudo.res.EPurpose;\r\nimport pseudo.res.ETransition;\r\nimport pseudo.res.Facility;\r\nimport pseudo.res.Country;\r\nimport pseudo.res.GLonLat;\r\nimport pseudo.res.HouseHold;\r\nimport pseudo.res.GMesh;\r\nimport pseudo.res.Person;\r\nimport pt.MotifAnalyzer;\r\nimport utils.Roulette;\r\n\r\npublic abstract class ActGenerator {\r\n\tpublic Map<Integer, Integer> mapMotif = new HashMap<>();\r\n\tprotected Country japan;\r\n\tprotected MNLParamAccessor mnlAcs;\r\n\tprotected Map<EMarkov,Map<EGender,MkChainAccessor>> mrkAcsMap;\r\n\t\r\n\tprotected static final Dijkstra routing = new Dijkstra();\r\n\t\r\n\tprotected static final long TRAIN_SERVICE_START_TIME = 5 * 3600;\r\n\tprotected static final int timeInterval = 15 * 60;\r\n\t\r\n\tprotected static final int MAX_SEARCH_DISTANDE = 20000;\r\n\r\n\t\r\n\tpublic ActGenerator(Country japan,\r\n\t\t\t\t\t\tMNLParamAccessor mnlAcs,\r\n\t\t\t\t\t\tMap<EMarkov,Map<EGender,MkChainAccessor>> mrkAcsMap) {\r\n\t\tthis.japan = japan;\r\n\t\tthis.mnlAcs = mnlAcs;\r\n\t\tthis.mrkAcsMap = mrkAcsMap;\r\n\t}\r\n\t\r\n\tprotected synchronized double getRandom() {\r\n\t\treturn ThreadLocalRandom.current().nextDouble();\r\n\t}\r\n\t\r\n\tprotected int formatTime(int time, int interval) {\r\n\t\treturn (time / interval) * interval;\r\n\t}\r\n\t\r\n\tprotected static Activity createActivity(Activity preActivity, \r\n\t\t\tGLonLat dest, int startTime, int endTime, EPurpose purpose) {\r\n\t\t\r\n\t\t// Pre activity\r\n\t\tlong preDuration = startTime - preActivity.getStartTime();\r\n\t\tpreActivity.setDuration(preDuration);\r\n\t\t\r\n\t\t// Next activity \r\n\t\tint duration = endTime - startTime;\r\n\t\tActivity res = new Activity(dest,startTime, duration, purpose);\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\tprotected int setMotif(Person person) {\r\n\t\tList<Activity> acts  = person.getActivities();\r\n\t\tif (acts.size() > 0) {\r\n\t\t\tList<Integer> list = new ArrayList<>();\r\n\t\t\tint counter = 100;\r\n\t\t\tfor (Activity a : acts) {\r\n\t\t\t\tEPurpose purpose = a.getPurpose();\r\n\t\t\t\tint loc = 0;\r\n\t\t\t\tif (purpose == EPurpose.HOME || \r\n\t\t\t\t\t\tpurpose == EPurpose.OFFICE || \r\n\t\t\t\t\t\tpurpose == EPurpose.SCHOOL) {\r\n\t\t\t\t\tloc = purpose.getId();\r\n\t\t\t\t}else {\r\n\t\t\t\t\tloc = counter++;\r\n\t\t\t\t}\r\n\t\t\t\tlist.add(loc);\r\n\t\t\t}\r\n\t\t\tlist = MotifAnalyzer.compress(list);\r\n\t\t\treturn MotifAnalyzer.getType(1, list);\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\t//\r\n\tprotected double getMeshCapacity(ETransition transition, GMesh mesh, EGender gender) {\r\n\t\tList<Double> values = mesh.getEconomics();\r\n\t\tif (values.size() > 0) {\r\n\t\t\tswitch (transition) {\r\n\t\t\tcase OFFICE:\r\n\t\t\t\treturn gender!=EGender.FEMALE ? mesh.getEconomics(14) : mesh.getEconomics(15);\r\n\t\t\tcase SHOPPING:\r\n\t\t\t\treturn mesh.getEconomics(4);\r\n\t\t\tcase EATING:\r\n\t\t\t\treturn mesh.getEconomics(new int[]{8,9});\r\n\t\t\tcase FREE:\r\n\t\t\t\treturn mesh.getEconomics(new int[]{5,7,10,12});\r\n\t\t\tcase BUSINESS:\r\n\t\t\t\treturn mesh.getEconomics(0);\r\n\t\t\tdefault:\r\n\t\t\t\treturn mesh.getEconomics(0);\r\n\t\t\t}\r\n\t\t}else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\tprotected List<Double> getMeshCapacity(ETransition transition, List<GMesh> meshes, EGender gender) {\r\n\t\tList<Double> res = new ArrayList<>();\r\n\t\tfor (GMesh mesh : meshes) {\r\n\t\t\tdouble capacity = (transition != ETransition.HOSPITAL) ? \r\n\t\t\t\t\tgetMeshCapacity(transition, mesh, gender) : mesh.getHospitalCapacity();\r\n\t\t\tres.add(capacity);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\tprotected List<Facility> getFacilities(ETransition transition, GMesh mesh){\r\n\t\tif (transition == ETransition.HOSPITAL) {\r\n\t\t\treturn mesh.getHospitals();\r\n\t\t}else if(transition==ETransition.SHOPPING){\r\n\t\t\treturn mesh.getRetails();\r\n\t\t}else if(transition==ETransition.EATING){\r\n\t\t\treturn mesh.getRestaurants();\r\n\t\t}else {\r\n\t\t\treturn mesh.getFacilities();\r\n\t\t}\r\n\t}\r\n\t\r\n\tprotected GLonLat choiceDestination(City city, ETransition transition, EGender gender) {\r\n\t\tList<GMesh> meshes = city.getMeshes();\r\n\t\tGMesh mesh = null;\r\n\t\t{\r\n\t\t\tList<Double> capacities = getMeshCapacity(transition, meshes, gender);\r\n\t\t\tint choice = Roulette.choice(capacities, getRandom());\r\n\t\t\tmesh = meshes.get(choice);\r\n\t\t}\r\n\t\t// Search a poi\r\n\t\tif (mesh != null) {\r\n\t\t\tList<Facility> facilities = getFacilities(transition, mesh);\r\n\t\t\tList<Double> capacities = new ArrayList<>();\r\n\t\t\tif (!facilities.isEmpty()) {\r\n\t\t\t\tfor (Facility f : facilities) {\r\n\t\t\t\t\tcapacities.add(f.getCapacity());\r\n\t\t\t\t}\r\n\t\t\t\tint choice = Roulette.choice(capacities, getRandom());\r\n\t\t\t\tFacility fac = facilities.get(choice);\r\n\t\t\t\treturn new GLonLat(fac, city.getId());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t// Only for commute\r\n\tprotected GLonLat choiceDestination2(GLonLat origin, City city, ETransition transition, EGender gender) {\r\n\t\tList<GMesh> meshes = city.getMeshes();\r\n\t\tGMesh mesh = null;\r\n\t\t{\r\n\t\t\tList<Double> probs = new ArrayList<>();\r\n\t\t\tList<Double> capacities = getMeshCapacity(transition, meshes, gender);\r\n\t\t\tfor (int i = 0; i < meshes.size(); i++) {\r\n\t\t\t\tGMesh tmesh = meshes.get(i);\r\n\t\t\t\tdouble capacity = capacities.get(i);\r\n\t\t\t\tILonLat center = tmesh.getCenter();\r\n\t\t\t\tdouble distance = DistanceUtils.distance(\r\n\t\t\t\t\t\torigin.getLon(), origin.getLat(), center.getLon(), center.getLat());\r\n\t\t\t\tprobs.add(capacity/Math.pow(distance, 2));\r\n\t\t\t}\r\n\t\t\tint choice = Roulette.choice(probs, getRandom());\r\n\t\t\tmesh = meshes.get(choice);\r\n\t\t}\r\n\t\t// Search a poi\r\n\t\tif (mesh != null) {\r\n\t\t\tList<Facility> facilities = getFacilities(transition, mesh);\r\n\t\t\tList<Double> capcities = new ArrayList<>();\r\n\t\t\tif (!facilities.isEmpty()) {\r\n\t\t\t\tfor (Facility f : facilities) {\r\n\t\t\t\t\tcapcities.add(f.getCapacity());\r\n\t\t\t\t}\r\n\t\t\t\tint choice = Roulette.choice(capcities, getRandom());\r\n\t\t\t\tFacility fac = facilities.get(choice);\r\n\t\t\t\treturn new GLonLat(fac, city.getId());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprotected GLonLat choiceFreeDestination(GLonLat origin, ETransition transition, boolean senior, EGender gender, ELabor labor) {\r\n\t\t// search mnl parameters\r\n\t\tCity city = japan.getCity(origin.getGcode());\r\n\t\tECity cityType = city.getType();\r\n\t\tList<Double> params = mnlAcs.get(labor, cityType, transition);\r\n\t\t\r\n\t\tif (params == null) {\r\n\t\t\tSystem.out.println(transition);\r\n\t\t}\r\n\t\t// search a city\r\n\t\tCity dcity = null;\r\n\t\tList<City> cities = japan.searchCities(MAX_SEARCH_DISTANDE, city);\r\n\t\t{\r\n\t\t\tList<Double> capcities = new ArrayList<>();\r\n\t\t\tdouble deno = 0;\r\n\t\t\tfor (City ecity : cities) {\r\n\t\t\t\tdouble dx = ecity.getLon() - city.getLon();\r\n\t\t\t\tdouble dy = ecity.getLat() - city.getLat();\r\n\t\t\t\tdouble distance = Math.sqrt(dx*dx+dy*dy);\r\n\t\t\t\tdouble prob = Math.exp(\r\n\t\t\t\t\t\tparams.get(0)*distance +\r\n\t\t\t\t\t\tparams.get(1)*(gender!=EGender.MALE?1:0) +\r\n\t\t\t\t\t\tparams.get(2)*(city.getId().equals(ecity.getId())?1:0) +\r\n\t\t\t\t\t\tparams.get(3)*(senior?1:0) +\r\n\t\t\t\t\t\tparams.get(4)*ecity.getArea() +\r\n\t\t\t\t\t\tparams.get(5)*ecity.getPopRatio()/1000 +\r\n\t\t\t\t\t\tparams.get(6)*ecity.getOfficeRatio()/1000);\r\n\t\t\t\tcapcities.add(prob);\r\n\t\t\t\tdeno += prob;\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < capcities.size(); i++) {\r\n\t\t\t\tcapcities.set(i, capcities.get(i)/deno);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint choice = Roulette.choice(capcities, getRandom());\r\n\t\t\tdcity = cities.get(choice);\r\n\t\t}\r\n\t\t\r\n\t\t// search a mesh\r\n\t\tif (dcity != null) {\r\n\t\t\tif (!city.getId().equals(dcity.getId())) {\r\n\t\t\t\treturn choiceDestination(dcity, transition, gender);\r\n\t\t\t}else {\r\n\t\t\t\treturn choiceDestination2(origin, dcity, transition, gender);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t\r\n\tprotected abstract Callable<Integer> createTask(Map<Integer, Integer> mapMotif, int id, List<HouseHold> households);\r\n\t\r\n\t\r\n\tpublic int assign(List<HouseHold> household) {\r\n\t\t// prepare thread processing\r\n\t\tint numThreads = Runtime.getRuntime().availableProcessors();\r\n\t\tSystem.out.println(\"NumOfThreads:\" + numThreads);\r\n\t\t\r\n\t\tList<Callable<Integer> > listTasks = new ArrayList<>();\r\n\t\tint listSize = household.size();\r\n\t\tint taskNum =numThreads * 10;\r\n\t\tint stepSize = listSize / taskNum + (listSize % taskNum != 0 ? 1 : 0);\r\n\t\tfor (int i = 0; i < listSize; i+= stepSize){\r\n\t\t\tint end = i + stepSize;\r\n\t\t\tend = Math.min(listSize, end);\r\n\t\t\tList<HouseHold> subList = household.subList(i, end);\r\n\t\t\tlistTasks.add(createTask(mapMotif, i/stepSize, subList));\r\n\t\t}\r\n\t\tSystem.out.println(\"NumOfTasks:\" + listTasks.size());\r\n\t\t\r\n\t\t// execute thread processing\r\n\t\tExecutorService es = Executors.newFixedThreadPool(numThreads);\r\n\t\ttry {\r\n\t\t\tes.invokeAll(listTasks);\r\n\t\t\tes.shutdown();\r\n\t\t} catch (Exception exp) {\r\n\t\t\texp.printStackTrace();\r\n\t\t}\t\t\r\n\t\treturn 0;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/gen/ActGenerator.java b/src/pseudo/gen/ActGenerator.java
--- a/src/pseudo/gen/ActGenerator.java	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/pseudo/gen/ActGenerator.java	(date 1733753694886)
@@ -1,9 +1,6 @@
 package pseudo.gen;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -142,65 +139,141 @@
 			return mesh.getFacilities();
 		}
 	}
-	
+
 	protected GLonLat choiceDestination(City city, ETransition transition, EGender gender) {
 		List<GMesh> meshes = city.getMeshes();
-		GMesh mesh = null;
-		{
-			List<Double> capacities = getMeshCapacity(transition, meshes, gender);
-			int choice = Roulette.choice(capacities, getRandom());
-			mesh = meshes.get(choice);
-		}
-		// Search a poi
-		if (mesh != null) {
-			List<Facility> facilities = getFacilities(transition, mesh);
-			List<Double> capacities = new ArrayList<>();
-			if (!facilities.isEmpty()) {
-				for (Facility f : facilities) {
-					capacities.add(f.getCapacity());
+		List<Double> meshCapacities = getMeshCapacity(transition, meshes, gender);
+
+		Set<Integer> excludedMeshes = new HashSet<>();
+
+		while (excludedMeshes.size() < meshes.size()) {
+			List<Double> filteredCapacities = new ArrayList<>();
+			List<GMesh> filteredMeshes = new ArrayList<>();
+
+			for (int i = 0; i < meshes.size(); i++) {
+				if (!excludedMeshes.contains(i)) {
+					filteredCapacities.add(meshCapacities.get(i));
+					filteredMeshes.add(meshes.get(i));
+				}
+			}
+
+			if (filteredMeshes.isEmpty()) {
+				System.out.println("No valid meshes available.");
+				return null;
+			}
+
+			int choice = Roulette.choice(filteredCapacities, getRandom());
+			GMesh mesh = filteredMeshes.get(choice);
+
+			if (mesh != null) {
+				List<Facility> facilities = getFacilities(transition, mesh);
+				if (!facilities.isEmpty()) {
+					List<Double> facilityCapacities = new ArrayList<>();
+					for (Facility f : facilities) {
+						facilityCapacities.add(f.getCapacity());
+					}
+					int facilityChoice = Roulette.choice(facilityCapacities, getRandom());
+					Facility fac = facilities.get(facilityChoice);
+					return new GLonLat(fac, city.getId());
+				} else {
+					excludedMeshes.add(meshes.indexOf(mesh));
+					System.out.println("No facilities found in mesh: " + mesh.getId() + ". Excluding...");
 				}
-				int choice = Roulette.choice(capacities, getRandom());
-				Facility fac = facilities.get(choice);
+			} else {
+				System.out.println("Mesh selection returned null. Retrying...");
+			}
+		}
+
+		for (GMesh mesh : meshes) {
+			List<Facility> allFacilities = mesh.getFacilities();
+			if (!allFacilities.isEmpty()) {
+				System.out.println("Fallback: Selecting from all facilities in mesh: " + mesh.getId());
+				List<Double> facilityCapacities = new ArrayList<>();
+				for (Facility f : allFacilities) {
+					facilityCapacities.add(f.getCapacity());
+				}
+				int facilityChoice = Roulette.choice(facilityCapacities, getRandom());
+				Facility fac = allFacilities.get(facilityChoice);
 				return new GLonLat(fac, city.getId());
 			}
 		}
+
+		System.out.println("Fallback failed: No facilities found in any mesh.");
 		return null;
 	}
-	
+
+
 	// Only for commute
 	protected GLonLat choiceDestination2(GLonLat origin, City city, ETransition transition, EGender gender) {
 		List<GMesh> meshes = city.getMeshes();
-		GMesh mesh = null;
-		{
-			List<Double> probs = new ArrayList<>();
-			List<Double> capacities = getMeshCapacity(transition, meshes, gender);
+		List<Double> capacities = getMeshCapacity(transition, meshes, gender);
+		Set<Integer> excludedMeshes = new HashSet<>(); // Record indices of meshes without facilities
+
+		while (excludedMeshes.size() < meshes.size()) {
+			// Calculate probabilities dynamically, excluding checked meshes
+			List<Double> probs = new ArrayList<>();
+			List<GMesh> filteredMeshes = new ArrayList<>();
 			for (int i = 0; i < meshes.size(); i++) {
-				GMesh tmesh = meshes.get(i);
-				double capacity = capacities.get(i);
-				ILonLat center = tmesh.getCenter();
-				double distance = DistanceUtils.distance(
-						origin.getLon(), origin.getLat(), center.getLon(), center.getLat());
-				probs.add(capacity/Math.pow(distance, 2));
+				if (!excludedMeshes.contains(i)) {
+					GMesh tmesh = meshes.get(i);
+					ILonLat center = tmesh.getCenter();
+					double distance = DistanceUtils.distance(
+							origin.getLon(), origin.getLat(), center.getLon(), center.getLat());
+					probs.add(capacities.get(i) / Math.pow(distance, 2));
+					filteredMeshes.add(tmesh);
+				}
 			}
+
+			if (filteredMeshes.isEmpty()) {
+				System.out.println("No valid meshes available.");
+				return null; // Exit if all meshes have been excluded
+			}
+
+			// Select a mesh based on the computed probabilities
 			int choice = Roulette.choice(probs, getRandom());
-			mesh = meshes.get(choice);
-		}
-		// Search a poi
-		if (mesh != null) {
-			List<Facility> facilities = getFacilities(transition, mesh);
-			List<Double> capcities = new ArrayList<>();
-			if (!facilities.isEmpty()) {
-				for (Facility f : facilities) {
-					capcities.add(f.getCapacity());
+			GMesh mesh = filteredMeshes.get(choice);
+
+			// Search for facilities in the selected mesh
+			if (mesh != null) {
+				List<Facility> facilities = getFacilities(transition, mesh);
+				if (!facilities.isEmpty()) {
+					// If facilities are found, select one and return its location
+					List<Double> facilityCapacities = new ArrayList<>();
+					for (Facility f : facilities) {
+						facilityCapacities.add(f.getCapacity());
+					}
+					int facilityChoice = Roulette.choice(facilityCapacities, getRandom());
+					Facility fac = facilities.get(facilityChoice);
+					return new GLonLat(fac, city.getId());
+				} else {
+					// Exclude this mesh and retry
+					excludedMeshes.add(meshes.indexOf(mesh));
+					System.out.println("No facilities found in mesh: " + mesh.getId() + ". Excluding...");
 				}
-				int choice = Roulette.choice(capcities, getRandom());
-				Facility fac = facilities.get(choice);
+			} else {
+				System.out.println("Mesh selection returned null. Retrying...");
+			}
+		}
+
+		for (GMesh mesh : meshes) {
+			List<Facility> allFacilities = mesh.getFacilities();
+			if (!allFacilities.isEmpty()) {
+				System.out.println("Fallback: Selecting from all facilities in mesh: " + mesh.getId());
+				List<Double> facilityCapacities = new ArrayList<>();
+				for (Facility f : allFacilities) {
+					facilityCapacities.add(f.getCapacity());
+				}
+				int facilityChoice = Roulette.choice(facilityCapacities, getRandom());
+				Facility fac = allFacilities.get(facilityChoice);
 				return new GLonLat(fac, city.getId());
 			}
 		}
+
+		System.out.println("Fallback failed: No facilities found in any mesh.");
 		return null;
 	}
 
+
 	protected GLonLat choiceFreeDestination(GLonLat origin, ETransition transition, boolean senior, EGender gender, ELabor labor) {
 		// search mnl parameters
 		City city = japan.getCity(origin.getGcode());
@@ -246,6 +319,8 @@
 			}else {
 				return choiceDestination2(origin, dcity, transition, gender);
 			}
+		}else{
+			System.out.println(cities);
 		}
 		return null;
 	}
Index: target/classes/config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>root=/mnt/large/data/PseudoPFLOW/\ninputDir=/mnt/large/data/PseudoPFLOW/processing/\n\n# Configuration for markov file paths\npref.1=markov/asahikawa2002\npref.2=markov/asahikawa2002\npref.3=markov/asahikawa2002\npref.4=markov/asahikawa2002\npref.5=markov/asahikawa2002\npref.6=markov/asahikawa2002\npref.7=markov/asahikawa2002\npref.8=markov/tokyo2018\npref.9=markov/tokyo2018\npref.10=markov/tokyo2018\npref.11=markov/tokyo2018\npref.12=markov/tokyo2018\npref.13=markov/tokyo2018\npref.14=markov/tokyo2018\npref.15=markov/tokyo2018\npref.16=markov/tokyo2018\npref.17=markov/chukyo2011\npref.18=markov/chukyo2011\npref.19=markov/chukyo2011\npref.20=markov/chukyo2011\npref.21=markov/chukyo2011\npref.22=markov/chukyo2011\npref.23=markov/chukyo2011\npref.24=markov/chukyo2011\npref.25=markov/kinki2010\npref.26=markov/kinki2010\npref.27=markov/kinki2010\npref.28=markov/kinki2010\npref.29=markov/kinki2010\npref.30=markov/kinki2010\npref.31=markov/kinki2010\npref.32=markov/kinki2010\npref.33=markov/kinki2010\npref.34=markov/kinki2010\npref.35=markov/kinki2010\npref.36=markov/kinki2010\npref.37=markov/kinki2010\npref.38=markov/kinki2010\npref.39=markov/kinki2010\npref.40=markov/kinki2010\npref.41=markov/kinki2010\npref.42=markov/kinki2010\npref.43=markov/kinki2010\npref.44=markov/kinki2010\npref.45=markov/kinki2010\npref.46=markov/kinki2010\npref.47=markov/kinki2010\n\n# API Configuration\napi.userID=Pang_Yanbo\napi.password=Pyb-37167209\napi.createSessionURL=https://157.82.223.35/webapi/CreateSession\napi.getRoadRouteURL=https://157.82.223.35/webapi/GetRoadRoute\napi.getMixedRouteURL=https://157.82.223.35/webapi/GetMixedRoute\n\n# Car Ownership\ncar.1 = 0.534\ncar.2 = 0.586\ncar.3 = 0.612\ncar.4 = 0.564\ncar.5 = 0.612\ncar.6 = 0.648\ncar.7 = 0.667\ncar.8 = 0.695\ncar.9 = 0.694\ncar.10 = 0.712\ncar.11 = 0.439\ncar.12 = 0.450\ncar.13 = 0.220\ncar.14 = 0.331\ncar.15 = 0.631\ncar.16 = 0.686\ncar.17 = 0.641\ncar.18 = 0.670\ncar.19 = 0.691\ncar.20 = 0.617\ncar.21 = 0.657\ncar.22 = 0.614\ncar.23 = 0.558\ncar.24 = 0.657\ncar.25 = 0.574\ncar.26 = 0.387\ncar.27 = 0.314\ncar.28 = 0.424\ncar.29 = 0.492\ncar.30 = 0.589\ncar.31 = 0.626\ncar.32 = 0.610\ncar.33 = 0.617\ncar.34 = 0.522\ncar.35 = 0.611\ncar.36 = 0.636\ncar.37 = 0.623\ncar.38 = 0.559\ncar.39 = 0.574\ncar.40 = 0.510\ncar.41 = 0.628\ncar.42 = 0.533\ncar.43 = 0.597\ncar.44 = 0.618\ncar.45 = 0.634\ncar.46 = 0.602\ncar.47 = 0.593
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/config.properties b/target/classes/config.properties
--- a/target/classes/config.properties	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/target/classes/config.properties	(date 1733726009884)
@@ -1,5 +1,6 @@
 root=/mnt/large/data/PseudoPFLOW/
 inputDir=/mnt/large/data/PseudoPFLOW/processing/
+outputDir=/mnt/free/owner/
 
 # Configuration for markov file paths
 pref.1=markov/asahikawa2002
Index: src/pseudo/gen/TripGenerator_WebAPI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pseudo.gen;\r\n\r\nimport jp.ac.ut.csis.pflow.geom2.DistanceUtils;\r\nimport jp.ac.ut.csis.pflow.routing4.logic.Dijkstra;\r\nimport jp.ac.ut.csis.pflow.routing4.res.Network;\r\nimport jp.ac.ut.csis.pflow.routing4.res.Node;\r\nimport org.geojson.FeatureCollection;\r\nimport org.jboss.netty.util.internal.ThreadLocalRandom;\r\nimport pseudo.acs.DataAccessor;\r\nimport pseudo.acs.ModeAccessor;\r\nimport pseudo.acs.PersonAccessor;\r\nimport pseudo.res.*;\r\nimport utils.Roulette;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\n\r\nimport java.io.InputStream;\r\nimport java.util.*;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\nimport org.apache.http.client.config.CookieSpecs;\r\nimport org.apache.http.client.config.RequestConfig;\r\nimport org.apache.http.conn.ssl.NoopHostnameVerifier;\r\nimport org.apache.http.conn.ssl.TrustSelfSignedStrategy;\r\nimport org.apache.http.ssl.SSLContextBuilder;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.NameValuePair;\r\nimport org.apache.http.message.BasicNameValuePair;\r\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\r\nimport org.apache.http.util.EntityUtils;\r\n\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport javax.net.ssl.SSLContext;\r\n\r\npublic class TripGenerator_WebAPI {\r\n\r\n\tprivate ModeAccessor modeAcs;\r\n\tprivate Country japan;\r\n\r\n\tprivate SSLContext sslContext;\r\n\tprivate CloseableHttpClient httpClient;\r\n\tprivate String sessionId;\r\n\r\n\tprivate static final double MAX_WALK_DISTANCE = 3000;\r\n\tprivate static final double MAX_SEARCH_STATAION_DISTANCE = 5000;\r\n\r\n\r\n\tpublic TripGenerator_WebAPI(Country japan, ModeAccessor modeAcs) throws Exception {\r\n\t\tsuper();\r\n\t\tthis.japan = japan;\r\n\t\tthis.modeAcs = modeAcs;\r\n\t\tthis.sslContext = createSSLContext();\r\n\t\tthis.httpClient = createHttpClient();\r\n\t\tthis.sessionId = createSession();\r\n\t}\r\n\r\n\tprivate SSLContext createSSLContext() throws Exception {\r\n\t\treturn SSLContextBuilder.create()\r\n\t\t\t\t.loadTrustMaterial(new TrustSelfSignedStrategy())\r\n\t\t\t\t.build();\r\n\t}\r\n\r\n\tprivate CloseableHttpClient createHttpClient() {\r\n\t\treturn HttpClients.custom().setSSLContext(this.sslContext)\r\n\t\t\t\t.setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)\r\n\t\t\t\t.setDefaultRequestConfig(RequestConfig.custom()\r\n\t\t\t\t\t\t.setCookieSpec(CookieSpecs.STANDARD)\r\n\t\t\t\t\t\t.build())\r\n\t\t\t\t.build();\r\n\t}\r\n\r\n\tprivate static HttpResponse executePostRequest(CloseableHttpClient httpClient, HttpPost postRequest) throws Exception {\r\n\t\treturn httpClient.execute(postRequest);\r\n\t}\r\n\r\n\tpublic String createSession() throws Exception{\r\n\r\n\t\tHttpPost createSessionPost = new HttpPost(prop.getProperty(\"api.createSessionURL\"));\r\n\r\n\t\tList<NameValuePair> sessionParams = new ArrayList<>();\r\n\t\tsessionParams.add(new BasicNameValuePair(\"UserID\", prop.getProperty(\"api.userID\")));\r\n\t\tsessionParams.add(new BasicNameValuePair(\"Password\", prop.getProperty(\"api.password\")));\r\n\t\tcreateSessionPost.setEntity(new UrlEncodedFormEntity(sessionParams));\r\n\r\n\t\tHttpResponse sessionResponse = executePostRequest(this.httpClient, createSessionPost);\r\n\t\tif (sessionResponse.getStatusLine().getStatusCode() == 200) {\r\n\t\t\tString sessionResponseBody = EntityUtils.toString(sessionResponse.getEntity());\r\n\t\t\tSystem.out.println(\"Session created successfully\");\r\n\t\t\tSystem.out.println(sessionResponseBody);\r\n\t\t\treturn sessionResponseBody.split(\",\")[1].trim().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"Failed to create session: \" + sessionResponse.getStatusLine().getStatusCode());\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tprotected synchronized double getRandom() {\r\n\t\treturn ThreadLocalRandom.current().nextDouble();\r\n\t}\r\n\t\r\n\tprivate class TripTask implements Callable<Integer> {\r\n\t\tprivate int id;\r\n\t\tprivate List<Person> listAgents;\r\n\t\tprivate int error;\r\n\t\tprivate int total;\r\n\t\tprivate final Dijkstra routing = new Dijkstra();\r\n\r\n\t\tpublic TripTask(int id, List<Person> listAgents){\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.listAgents = listAgents;\r\n\t\t\tthis.total = error = 0;\r\n\t\t}\t\r\n\t\t\r\n\t\tprivate EPurpose convertHomeMode(ELabor labor) {\r\n\t\t\tswitch(labor) {\r\n\t\t\tcase WORKER:\r\n\t\t\t\treturn EPurpose.OFFICE;\r\n\t\t\tcase JOBLESS:\r\n\t\t\tcase NO_LABOR:\r\n\t\t\tcase UNDEFINED:\r\n\t\t\tcase INFANT:\r\n\t\t\t\treturn EPurpose.FREE;\r\n\t\t\tcase PRE_SCHOOL:\r\n\t\t\tcase PRIMARY_SCHOOL:\r\n\t\t\tcase SECONDARY_SCHOOL:\r\n\t\t\tcase HIGH_SCHOOL:\r\n\t\t\tcase COLLEGE:\r\n\t\t\tcase JUNIOR_COLLEGE:\r\n\t\t\tdefault:\r\n\t\t\t\treturn EPurpose.SCHOOL;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tprivate int process(Person person) throws Exception {\r\n\t\t\tList<Activity> activities = person.getActivities();\r\n\t\t\tActivity pre = activities.get(0);\r\n\t\t\tEGender gender = person.getGender();\r\n\t\t\tELabor labor = person.getLabor();\r\n\t\t\tint age = person.getAge();\r\n\t\t\tNetwork station = japan.getStation();\r\n\r\n\t\t\tCity city = japan.getCity(pre.getGcode());\r\n\t\t\tif(pre.getGcode().length()<5){\r\n\t\t\t\tcity = japan.getCity(\"0\" + pre.getGcode());\r\n\t\t\t}\r\n\r\n\t\t\tEPTCity type = city.getPTType();\r\n\t\t\tETransport primaryMode = null;\r\n\t\t\tif (activities.size() <= 1) {\r\n\t\t\t\tperson.addTrip(new Trip(ETransport.NOT_DEFINED, EPurpose.HOME, 0, pre.getLocation(), pre.getLocation()));\r\n\t\t\t}else {\r\n\t\t\t\tfor (int i = 1; i < activities.size(); i++) {\r\n\r\n\t\t\t\t\tActivity next = activities.get(i);\r\n\t\t\t\t\tGLonLat oll = pre.getLocation();\r\n\t\t\t\t\tGLonLat dll = next.getLocation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tEPurpose purpose = next.getPurpose();\r\n\t\t\t\t\tdouble distance = DistanceUtils.distance(oll, dll);\r\n\r\n\t\t\t\t\tif (distance > 0) {\r\n\t\t\t\t\t\tETransport nextMode = null;\r\n\r\n\t\t\t\t\t\tMap<String, String> params = new HashMap<>();\r\n\t\t\t\t\t\tparams.put(\"UnitTypeCode\", \"2\");\r\n\t\t\t\t\t\tparams.put(\"StartLongitude\", String.valueOf(oll.getLon()));\r\n\t\t\t\t\t\tparams.put(\"StartLatitude\", String.valueOf(oll.getLat()));\r\n\t\t\t\t\t\tparams.put(\"GoalLongitude\", String.valueOf(dll.getLon()));\r\n\t\t\t\t\t\tparams.put(\"GoalLatitude\", String.valueOf(dll.getLat()));\r\n\t\t\t\t\t\t// params.put(\"TransportCode\", \"3\");\r\n\r\n\t\t\t\t\t\tMap<String, String> carparams = new HashMap<>(params);\r\n\t\t\t\t\t\tcarparams.put(\"TransportCode\", \"6\");\r\n\t\t\t\t\t\tcarparams.put(\"OutputNum\", \"1\");\r\n\r\n\t\t\t\t\t\tMap<String, String> mixedparams = new HashMap<>(params);\r\n\t\t\t\t\t\tmixedparams.put(\"TransportCode\", \"3\");\r\n\r\n\t\t\t\t\t\t// Map<String, String> walkparams = new HashMap<>(params);\r\n\t\t\t\t\t\t// walkparams.put(\"TransportCode\", \"1\");\r\n\r\n//\t\t\t\t\t\tlong starttime = System.currentTimeMillis();\r\n\t\t\t\t\t\tJsonNode mixedResults = getMixedRoute(httpClient, sessionId, mixedparams);\r\n\t\t\t\t\t\tdouble mixedfare = mixedResults.get(\"fare\").asDouble();\r\n\t\t\t\t\t\t// System.out.println(mixedfare);\r\n\t\t\t\t\t\tdouble mixedtime = mixedResults.get(\"total_time\").asDouble();\r\n\t\t\t\t\t\tDouble mixedcost = mixedfare + mixedtime / 60 * 1000.0;\r\n\r\n\t\t\t\t\t\tJsonNode roadResults = getRoadRoute(httpClient, sessionId, carparams);\r\n\t\t\t\t\t\tdouble roadfare = roadResults.get(\"features\").get(0).get(\"properties\").get(\"fare\").asDouble();\r\n\t\t\t\t\t\t// System.out.println(roadfare);\r\n\t\t\t\t\t\tdouble roadtime = roadResults.get(\"features\").get(0).get(\"properties\").get(\"required_time\").asDouble();\r\n\t\t\t\t\t\tDouble roadcost = roadfare + roadtime / 60 * 1000.0;\r\n\r\n\t\t\t\t\t\t// JsonNode walkResults = getRoadRoute(httpClient, sessionId, walkparams);\r\n\t\t\t\t\t\tdouble walktime = roadtime * 10;\r\n\t\t\t\t\t\tDouble walkcost = walktime / 60 * 1000.0;\r\n\r\n\r\n//\t\t\t\t\t\tlong endtime = System.currentTimeMillis();\r\n//\t\t\t\t\t\tSystem.out.println(endtime +\" :\"+ (endtime-starttime));\r\n\t\t\t\t\t\t// String features = results.get(\"features\");\r\n\t\t\t\t\t\t// JsonNode routes = results.get(\"features\");\r\n\t\t\t\t\t\t// for(JsonNode feature: routes){\r\n\t\t\t\t\t\t\t\t// System.out.println(feature);\r\n\t\t\t\t\t\t// };\r\n\r\n\t\t\t\t\t\t// choice mode\r\n\r\n\t\t\t\t\t\tif (purpose != EPurpose.HOME){\r\n\t\t\t\t\t\t\tMap<ETransport, Double> choices = new LinkedHashMap<>();\r\n\t\t\t\t\t\t\tchoices.put(ETransport.MIX, mixedcost);\r\n\t\t\t\t\t\t\tchoices.put(ETransport.WALK, walkcost);\r\n\t\t\t\t\t\t\tif(person.hasCar()){\r\n\t\t\t\t\t\t\t\tchoices.put(ETransport.CAR, roadcost);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tnextMode = choices.entrySet()\r\n\t\t\t\t\t\t\t\t\t.stream()\r\n\t\t\t\t\t\t\t\t\t.min(Comparator.comparing(Map.Entry::getValue))\r\n\t\t\t\t\t\t\t\t\t.map(Map.Entry::getKey)\r\n\t\t\t\t\t\t\t\t\t.orElse(ETransport.NOT_DEFINED);\r\n\t\t\t\t\t\t\tif(i==1&&nextMode==ETransport.CAR){\r\n\t\t\t\t\t\t\t\tprimaryMode = nextMode;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tif(primaryMode!=null){\r\n\t\t\t\t\t\t\t\tnextMode = primaryMode;\r\n\t\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t\tMap<ETransport, Double> choices = new LinkedHashMap<>();\r\n\t\t\t\t\t\t\t\tchoices.put(ETransport.MIX, mixedcost);\r\n\t\t\t\t\t\t\t\tchoices.put(ETransport.WALK, walkcost);\r\n\t\t\t\t\t\t\t\tif (person.hasCar()) {\r\n\t\t\t\t\t\t\t\t\tchoices.put(ETransport.CAR, roadcost);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tnextMode = choices.entrySet()\r\n\t\t\t\t\t\t\t\t\t\t.stream()\r\n\t\t\t\t\t\t\t\t\t\t.min(Comparator.comparing(Map.Entry::getValue))\r\n\t\t\t\t\t\t\t\t\t\t.map(Map.Entry::getKey)\r\n\t\t\t\t\t\t\t\t\t\t.orElse(ETransport.NOT_DEFINED);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tNode station1 = routing.getNearestNode(station, oll.getLon(), oll.getLat(), MAX_SEARCH_STATAION_DISTANCE);\r\n\t\t\t\t\t\tNode station2 = routing.getNearestNode(station, dll.getLon(), dll.getLat(), MAX_SEARCH_STATAION_DISTANCE);\r\n\r\n\t\t\t\t\t\tif (purpose != EPurpose.HOME) {\r\n\t\t\t\t\t\t\tList<Double> modeProbs = modeAcs.get(type, gender, purpose, age, distance);\r\n\t\t\t\t\t\t\tif (station1 == null || station2 == null || station1.getNodeID().equals(station2.getNodeID())){\r\n\t\t\t\t\t\t\t\tmodeProbs = modeProbs.subList(0, modeProbs.size() - 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tint tindex = Roulette.choice(modeProbs, getRandom());\r\n\t\t\t\t\t\t\tnextMode = modeAcs.getCode(tindex);\r\n\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\tnextMode = primaryMode;\r\n\t\t\t\t\t\t\tif(nextMode == ETransport.TRAIN && !(station1 != null && station2 != null)) {\r\n\t\t\t\t\t\t\t\tnextMode = ETransport.CAR;\r\n\t\t\t\t\t\t\t}else if (nextMode == ETransport.WALK && distance > MAX_WALK_DISTANCE) {\r\n\t\t\t\t\t\t\t\tnextMode = ETransport.CAR;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// store primary mode\r\n\t\t\t\t\t\tif (purpose == EPurpose.OFFICE || purpose == EPurpose.SCHOOL) {\r\n\t\t\t\t\t\t\tprimaryMode = nextMode;\r\n\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\tprimaryMode = nextMode;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// create trip or sub trips\r\n//\t\t\t\t\t\tif (nextMode != ETransport.TRAIN) {\r\n//\t\t\t\t\t\t\t// single mode\r\n//\t\t\t\t\t\t\tlong travelTime = (long)(distance/Speed.get(nextMode));\r\n//\t\t\t\t\t\t\tlong depTime = next.getStartTime() - travelTime;\r\n//\t\t\t\t\t\t\tperson.addTrip(new Trip(nextMode, purpose, depTime, oll, dll));\r\n//\t\t\t\t\t\t}else {\r\n//\t\t\t\t\t\t\tlong travelTime = 0;\r\n//\t\t\t\t\t\t\tlong time1 = 0;\r\n//\t\t\t\t\t\t\tlong time2 = 0;\r\n//\t\t\t\t\t\t\tETransport accMode, egrMode;\r\n//\t\t\t\t\t\t\t// access time\r\n//\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\tEPurpose t_purpose = purpose != EPurpose.HOME ? purpose : convertHomeMode(labor);\r\n//\t\t\t\t\t\t\t\tdistance = DistanceUtils.distance(oll, station1);\r\n//\t\t\t\t\t\t\t\tList<Double> probs = modeAcs.get(type, gender, t_purpose, age, distance);\r\n//\t\t\t\t\t\t\t\tprobs = probs.subList(0, probs.size()-1);\r\n//\t\t\t\t\t\t\t\tint tindex = Roulette.choice(probs, getRandom());\r\n//\t\t\t\t\t\t\t\taccMode = modeAcs.getCode(tindex);\r\n//\r\n//\t\t\t\t\t\t\t\ttravelTime += (long)(distance / Speed.get(accMode));\r\n//\t\t\t\t\t\t\t\ttime1 = travelTime;\r\n//\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t// trip time\r\n//\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\tdistance = DistanceUtils.distance(station1, station2);\r\n//\t\t\t\t\t\t\t\ttravelTime += (long)(distance / Speed.get(nextMode));\r\n//\t\t\t\t\t\t\t\ttime2 = travelTime;\r\n//\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t// egress time\r\n//\t\t\t\t\t\t\t{\r\n//\t\t\t\t\t\t\t\tEPurpose t_purpose = purpose != EPurpose.HOME ? purpose : convertHomeMode(labor);\r\n//\t\t\t\t\t\t\t\tdistance = DistanceUtils.distance(station2, dll);\r\n//\t\t\t\t\t\t\t\tList<Double> probs = modeAcs.get(type, gender, t_purpose, age, distance);\r\n//\t\t\t\t\t\t\t\tprobs = probs.subList(0, probs.size()-1);\r\n//\t\t\t\t\t\t\t\tint tindex = Roulette.choice(probs, getRandom());\r\n//\t\t\t\t\t\t\t\tegrMode = modeAcs.getCode(tindex);\r\n//\t\t\t\t\t\t\t\ttravelTime += (long)(distance / Speed.get(egrMode));\r\n//\t\t\t\t\t\t\t}\r\n//\t\t\t\t\t\t\t// create sub trips\r\n//\t\t\t\t\t\t\tlong depTime = next.getStartTime()-travelTime;\r\n//\r\n//\t\t\t\t\t\t\tperson.addTrip(new Trip(accMode, purpose, depTime, oll, station1));\r\n//\t\t\t\t\t\t\tperson.addTrip(new Trip(nextMode, purpose, depTime+time1, station1, station2));\r\n//\t\t\t\t\t\t\tperson.addTrip(new Trip(egrMode, purpose, depTime+time2, station2, dll));\r\n//\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// pre = next;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic Integer call() throws Exception {\r\n\t\t\ttry {\r\n\t\t\tfor (Person p : listAgents) {\r\n\t\t\t\tint res = process(p);\r\n\t\t\t\tif (res < 0) {\r\n\t\t\t\t\tthis.error++;\r\n\t\t\t\t}\r\n\t\t\t\tthis.total++;\r\n\t\t\t}\r\n\t\t\t}catch(Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\t// System.out.println(String.format(\"[%d]-%d-%d\",id, error, total));\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tpublic void generate(List<Person> agents) {\r\n\t\t// prepare thread processing\r\n\t\tint numThreads = Runtime.getRuntime().availableProcessors();\r\n\t\tSystem.out.println(\"NumOfThreads:\" + numThreads);\r\n\t\t\r\n\t\tList<Callable<Integer> > listTasks = new ArrayList<>();\r\n\t\tint listSize = agents.size();\r\n\t\tint taskNum = numThreads * 10;\r\n\t\tint stepSize = listSize / taskNum + (listSize % taskNum != 0 ? 1 : 0);\r\n\t\tfor (int i = 0; i < listSize; i+= stepSize){\r\n\t\t\tint end = i + stepSize;\r\n\t\t\tend = (listSize < end) ? listSize : end;\r\n\t\t\tList<Person> subList = agents.subList(i, end);\r\n\t\t\tlistTasks.add(new TripTask(i, subList));\r\n\t\t}\r\n\t\tSystem.out.println(\"NumOfTasks:\" + listTasks.size());\r\n\t\t\r\n\t\t// execute thread processing\r\n\t\tExecutorService es = Executors.newFixedThreadPool(numThreads);\r\n\t\ttry {\r\n\t\t\tes.invokeAll(listTasks);\r\n\t\t\tes.shutdown();\r\n\t\t} catch (Exception exp) {\r\n\t\t\texp.printStackTrace();\r\n\t\t}\t\t\r\n\t}\r\n\r\n//\tprivate static String createSession(CloseableHttpClient httpClient) throws Exception {\r\n//\t\tHttpPost createSessionPost = new HttpPost(prop.getProperty(\"api.createSessionURL\"));\r\n//\r\n//\t\tList<NameValuePair> sessionParams = new ArrayList<>();\r\n//\t\tsessionParams.add(new BasicNameValuePair(\"UserID\", prop.getProperty(\"api.userID\")));\r\n//\t\tsessionParams.add(new BasicNameValuePair(\"Password\", prop.getProperty(\"api.password\")));\r\n//\t\tcreateSessionPost.setEntity(new UrlEncodedFormEntity(sessionParams));\r\n//\r\n//\t\tHttpResponse sessionResponse = executePostRequest(httpClient, createSessionPost);\r\n//\t\tif (sessionResponse.getStatusLine().getStatusCode() == 200) {\r\n//\t\t\tString sessionResponseBody = EntityUtils.toString(sessionResponse.getEntity());\r\n//\t\t\tSystem.out.println(\"Session created successfully\");\r\n//\t\t\tSystem.out.println(sessionResponseBody);\r\n//\t\t\treturn sessionResponseBody.split(\",\")[1].trim().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\r\n//\t\t} else {\r\n//\t\t\tSystem.out.println(\"Failed to create session: \" + sessionResponse.getStatusLine().getStatusCode());\r\n//\t\t\treturn \"\";\r\n//\t\t}\r\n//\t}\r\n\r\n\tprivate static JsonNode getMixedRoute(CloseableHttpClient httpClient, String sessionid, Map<String, String> params) throws Exception {\r\n\t\tHttpPost mixedRoutePost = new HttpPost(prop.getProperty(\"api.getMixedRouteURL\"));\r\n\r\n\t\tList<NameValuePair> mixedRouteParams = new ArrayList<>();\r\n\t\tfor (Map.Entry<String, String> entry : params.entrySet()) {\r\n\t\t\tmixedRouteParams.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));\r\n\t\t}\r\n\r\n\t\tmixedRoutePost.setEntity(new UrlEncodedFormEntity(mixedRouteParams));\r\n\t\tmixedRoutePost.setHeader(\"Cookie\", \"WebApiSessionID=\" + sessionid);\r\n\r\n\t\tHttpResponse mixedRouteResponse = executePostRequest(httpClient, mixedRoutePost);\r\n\t\tObjectMapper mapper = new ObjectMapper();\r\n\r\n\t\tif (mixedRouteResponse.getStatusLine().getStatusCode() == 200) {\r\n\t\t\tString mixedRouteResponseBody = EntityUtils.toString(mixedRouteResponse.getEntity());\r\n\t\t\treturn mapper.readTree(mixedRouteResponseBody);\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"Failed to get mixed route: \" + mixedRouteResponse.getStatusLine().getStatusCode());\r\n\t\t\treturn mapper.readTree(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static JsonNode getRoadRoute(CloseableHttpClient httpClient, String sessionid, Map<String, String> params) throws Exception {\r\n\t\tHttpPost roadRoutePost = new HttpPost(prop.getProperty(\"api.getRoadRouteURL\"));\r\n\r\n\t\tList<NameValuePair> roadRouteParams = new ArrayList<>();\r\n\t\tfor (Map.Entry<String, String> entry : params.entrySet()) {\r\n\t\t\troadRouteParams.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));\r\n\t\t}\r\n\r\n\t\troadRoutePost.setEntity(new UrlEncodedFormEntity(roadRouteParams));\r\n\t\troadRoutePost.setHeader(\"Cookie\", \"WebApiSessionID=\" + sessionid);\r\n\r\n\t\tHttpResponse roadRouteResponse = executePostRequest(httpClient, roadRoutePost);\r\n\t\tObjectMapper mapper = new ObjectMapper();\r\n\r\n\t\tif (roadRouteResponse.getStatusLine().getStatusCode() == 200) {\r\n\t\t\tString roadRouteResponseBody = EntityUtils.toString(roadRouteResponse.getEntity());\r\n\t\t\treturn mapper.readTree(roadRouteResponseBody);\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"Failed to get road route: \" + roadRouteResponse.getStatusLine().getStatusCode());\r\n\t\t\treturn mapper.readTree(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tprivate static Properties prop;\r\n\tprivate static void loadProperties() throws Exception {\r\n\t\tInputStream inputStream = Commuter.class.getClassLoader().getResourceAsStream(\"config.properties\");\r\n\t\tif (inputStream == null) {\r\n\t\t\tthrow new FileNotFoundException(\"config.properties file not found in the classpath\");\r\n\t\t}\r\n\t\tprop = new Properties();\r\n\t\tprop.load(inputStream);\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t\r\n\t\tCountry japan = new Country();\r\n\t\t\r\n\t\tSystem.out.println(\"start\");\r\n\r\n\t\tloadProperties();\r\n\r\n\t\tString inputDir = null;\r\n\t\tString root = null;\r\n\r\n\t\tInputStream inputStream = Commuter.class.getClassLoader().getResourceAsStream(\"config.properties\");\r\n\t\tif (inputStream == null) {\r\n\t\t\tthrow new FileNotFoundException(\"config.properties file not found in the classpath\");\r\n\t\t}\r\n\t\tProperties prop = new Properties();\r\n\t\tprop.load(inputStream);\r\n\r\n\t\troot = prop.getProperty(\"root\");\r\n\t\tinputDir = prop.getProperty(\"inputDir\");\r\n\t\tSystem.out.println(\"Root Directory: \" + root);\r\n\t\tSystem.out.println(\"Input Directory: \" + inputDir);\r\n\t\t\r\n\t\tint mfactor = 1;\r\n\t\t\r\n\t\t// load data\r\n\t\tString cityFile = String.format(\"%scity_boundary.csv\", inputDir);\r\n\t\tDataAccessor.loadCityData(cityFile, japan);\r\n\t\t\r\n\t\tString stationFile = String.format(\"%sbase_station.csv\", inputDir);\r\n\t\tNetwork station = DataAccessor.loadLocationData(stationFile);\r\n\t\tjapan.setStation(station);\r\n\t\r\n\t\tString modeFile = String.format(\"%sact_transport.csv\", inputDir);\r\n\t\tModeAccessor modeAcs = new ModeAccessor(modeFile);\r\n\t\r\n\t\t// create worker\r\n\t\tTripGenerator_WebAPI worker = new TripGenerator_WebAPI(japan, modeAcs);\r\n\t\tString outputDir = String.format(\"%s/trip/\", root);\r\n\r\n//\t\tif (!worker.sessionId.isEmpty()) {\r\n//\t\t\tMap<String, String> params = new HashMap<>();\r\n//\t\t\tparams.put(\"UnitTypeCode\", \"2\");\r\n//\t\t\tparams.put(\"StartLongitude\", \"139.56629225\");\r\n//\t\t\tparams.put(\"StartLatitude\", \"35.663611996\");\r\n//\t\t\tparams.put(\"GoalLongitude\", \"139.75884674036305\");\r\n//\t\t\tparams.put(\"GoalLatitude\", \"35.69638343647759\");\r\n//\t\t\tparams.put(\"TransportCode\", \"3\");\r\n//\r\n//\t\t\tgetMixedRoute(worker.httpClient, worker.sessionId, params);\r\n//\t\t}\r\n\r\n\r\n\t\tint start = 1;\r\n\t\tfor (int i = 13; i <= 13; i++){\r\n\t\t\tFile prefDir = new File(outputDir, String.valueOf(i));\r\n\t\t\tSystem.out.println(\"Start prefecture:\" + i + prefDir.mkdirs());\r\n\t\t\tDouble ratio = Double.parseDouble(prop.getProperty(\"car.\" + i));\r\n\r\n\t\t\tFile actDir = new File(String.format(\"%s/activity/\", root), String.valueOf(i));\r\n\t\t\tfor(File file: actDir.listFiles()){\r\n\t\t\t\tif (file.getName().contains(\".csv\")) {\r\n\t\t\t\t\tlong starttime = System.currentTimeMillis();\r\n\t\t\t\t\tList<Person> agents = PersonAccessor.loadActivity(file.getAbsolutePath(), mfactor, ratio);\r\n\t\t\t\t\tSystem.out.println(String.format(\"%s\", file.getName()));\r\n\t\t\t\t\tworker.generate(agents);\r\n\t\t\t\t\tPersonAccessor.writeTrips(new File(outputDir+ i + \"/trip_\"+ file.getName().substring(9,14) + \".csv\").getAbsolutePath(), agents);\r\n\t\t\t\t\tlong endtime = System.currentTimeMillis();\r\n\t\t\t\t\tSystem.out.println(file.getName() + \": \" + (endtime - starttime));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.println(\"end\");\r\n\t\tSystem.out.println(System.currentTimeMillis());\r\n\r\n\t}\t\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/gen/TripGenerator_WebAPI.java b/src/pseudo/gen/TripGenerator_WebAPI.java
--- a/src/pseudo/gen/TripGenerator_WebAPI.java	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/pseudo/gen/TripGenerator_WebAPI.java	(date 1725259741539)
@@ -140,7 +140,6 @@
 			}
 		}
 		
-		
 		private int process(Person person) throws Exception {
 			List<Activity> activities = person.getActivities();
 			Activity pre = activities.get(0);
Index: src/main/resources/config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>root=/mnt/large/data/PseudoPFLOW/\ninputDir=/mnt/large/data/PseudoPFLOW/processing/\n\n# Configuration for markov file paths\npref.1=markov/asahikawa2002\npref.2=markov/asahikawa2002\npref.3=markov/asahikawa2002\npref.4=markov/asahikawa2002\npref.5=markov/asahikawa2002\npref.6=markov/asahikawa2002\npref.7=markov/asahikawa2002\npref.8=markov/tokyo2018\npref.9=markov/tokyo2018\npref.10=markov/tokyo2018\npref.11=markov/tokyo2018\npref.12=markov/tokyo2018\npref.13=markov/tokyo2018\npref.14=markov/tokyo2018\npref.15=markov/tokyo2018\npref.16=markov/tokyo2018\npref.17=markov/chukyo2011\npref.18=markov/chukyo2011\npref.19=markov/chukyo2011\npref.20=markov/chukyo2011\npref.21=markov/chukyo2011\npref.22=markov/chukyo2011\npref.23=markov/chukyo2011\npref.24=markov/chukyo2011\npref.25=markov/kinki2010\npref.26=markov/kinki2010\npref.27=markov/kinki2010\npref.28=markov/kinki2010\npref.29=markov/kinki2010\npref.30=markov/kinki2010\npref.31=markov/kinki2010\npref.32=markov/kinki2010\npref.33=markov/kinki2010\npref.34=markov/kinki2010\npref.35=markov/kinki2010\npref.36=markov/kinki2010\npref.37=markov/kinki2010\npref.38=markov/kinki2010\npref.39=markov/kinki2010\npref.40=markov/kinki2010\npref.41=markov/kinki2010\npref.42=markov/kinki2010\npref.43=markov/kinki2010\npref.44=markov/kinki2010\npref.45=markov/kinki2010\npref.46=markov/kinki2010\npref.47=markov/kinki2010\n\n# API Configuration\napi.userID=Pang_Yanbo\napi.password=Pyb-37167209\napi.createSessionURL=https://157.82.223.35/webapi/CreateSession\napi.getRoadRouteURL=https://157.82.223.35/webapi/GetRoadRoute\napi.getMixedRouteURL=https://157.82.223.35/webapi/GetMixedRoute\n\n# Car Ownership\ncar.1 = 0.534\ncar.2 = 0.586\ncar.3 = 0.612\ncar.4 = 0.564\ncar.5 = 0.612\ncar.6 = 0.648\ncar.7 = 0.667\ncar.8 = 0.695\ncar.9 = 0.694\ncar.10 = 0.712\ncar.11 = 0.439\ncar.12 = 0.450\ncar.13 = 0.220\ncar.14 = 0.331\ncar.15 = 0.631\ncar.16 = 0.686\ncar.17 = 0.641\ncar.18 = 0.670\ncar.19 = 0.691\ncar.20 = 0.617\ncar.21 = 0.657\ncar.22 = 0.614\ncar.23 = 0.558\ncar.24 = 0.657\ncar.25 = 0.574\ncar.26 = 0.387\ncar.27 = 0.314\ncar.28 = 0.424\ncar.29 = 0.492\ncar.30 = 0.589\ncar.31 = 0.626\ncar.32 = 0.610\ncar.33 = 0.617\ncar.34 = 0.522\ncar.35 = 0.611\ncar.36 = 0.636\ncar.37 = 0.623\ncar.38 = 0.559\ncar.39 = 0.574\ncar.40 = 0.510\ncar.41 = 0.628\ncar.42 = 0.533\ncar.43 = 0.597\ncar.44 = 0.618\ncar.45 = 0.634\ncar.46 = 0.602\ncar.47 = 0.593
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/config.properties b/src/main/resources/config.properties
--- a/src/main/resources/config.properties	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/src/main/resources/config.properties	(date 1733725532191)
@@ -1,5 +1,6 @@
 root=/mnt/large/data/PseudoPFLOW/
 inputDir=/mnt/large/data/PseudoPFLOW/processing/
+outputDir=/mnt/free/owner/
 
 # Configuration for markov file paths
 pref.1=markov/asahikawa2002
Index: target/classes/main/resources/config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>root=/mnt/large/data/PseudoPFLOW/\ninputDir=/mnt/large/data/PseudoPFLOW/processing/\n\n# Configuration for markov file paths\npref.1=markov/asahikawa2002\npref.2=markov/asahikawa2002\npref.3=markov/asahikawa2002\npref.4=markov/asahikawa2002\npref.5=markov/asahikawa2002\npref.6=markov/asahikawa2002\npref.7=markov/asahikawa2002\npref.8=markov/tokyo2018\npref.9=markov/tokyo2018\npref.10=markov/tokyo2018\npref.11=markov/tokyo2018\npref.12=markov/tokyo2018\npref.13=markov/tokyo2018\npref.14=markov/tokyo2018\npref.15=markov/tokyo2018\npref.16=markov/tokyo2018\npref.17=markov/chukyo2011\npref.18=markov/chukyo2011\npref.19=markov/chukyo2011\npref.20=markov/chukyo2011\npref.21=markov/chukyo2011\npref.22=markov/chukyo2011\npref.23=markov/chukyo2011\npref.24=markov/chukyo2011\npref.25=markov/kinki2010\npref.26=markov/kinki2010\npref.27=markov/kinki2010\npref.28=markov/kinki2010\npref.29=markov/kinki2010\npref.30=markov/kinki2010\npref.31=markov/kinki2010\npref.32=markov/kinki2010\npref.33=markov/kinki2010\npref.34=markov/kinki2010\npref.35=markov/kinki2010\npref.36=markov/kinki2010\npref.37=markov/kinki2010\npref.38=markov/kinki2010\npref.39=markov/kinki2010\npref.40=markov/kinki2010\npref.41=markov/kinki2010\npref.42=markov/kinki2010\npref.43=markov/kinki2010\npref.44=markov/kinki2010\npref.45=markov/kinki2010\npref.46=markov/kinki2010\npref.47=markov/kinki2010\n\n# API Configuration\napi.userID=Pang_Yanbo\napi.password=Pyb-37167209\napi.createSessionURL=https://157.82.223.35/webapi/CreateSession\napi.getRoadRouteURL=https://157.82.223.35/webapi/GetRoadRoute\napi.getMixedRouteURL=https://157.82.223.35/webapi/GetMixedRoute\n\n# Car Ownership\ncar.1 = 0.534\ncar.2 = 0.586\ncar.3 = 0.612\ncar.4 = 0.564\ncar.5 = 0.612\ncar.6 = 0.648\ncar.7 = 0.667\ncar.8 = 0.695\ncar.9 = 0.694\ncar.10 = 0.712\ncar.11 = 0.439\ncar.12 = 0.450\ncar.13 = 0.220\ncar.14 = 0.331\ncar.15 = 0.631\ncar.16 = 0.686\ncar.17 = 0.641\ncar.18 = 0.670\ncar.19 = 0.691\ncar.20 = 0.617\ncar.21 = 0.657\ncar.22 = 0.614\ncar.23 = 0.558\ncar.24 = 0.657\ncar.25 = 0.574\ncar.26 = 0.387\ncar.27 = 0.314\ncar.28 = 0.424\ncar.29 = 0.492\ncar.30 = 0.589\ncar.31 = 0.626\ncar.32 = 0.610\ncar.33 = 0.617\ncar.34 = 0.522\ncar.35 = 0.611\ncar.36 = 0.636\ncar.37 = 0.623\ncar.38 = 0.559\ncar.39 = 0.574\ncar.40 = 0.510\ncar.41 = 0.628\ncar.42 = 0.533\ncar.43 = 0.597\ncar.44 = 0.618\ncar.45 = 0.634\ncar.46 = 0.602\ncar.47 = 0.593
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/main/resources/config.properties b/target/classes/main/resources/config.properties
--- a/target/classes/main/resources/config.properties	(revision 97bf6748c3a20d1dbb06873a7aee98e1fcfa6e06)
+++ b/target/classes/main/resources/config.properties	(date 1733726009883)
@@ -1,5 +1,6 @@
 root=/mnt/large/data/PseudoPFLOW/
 inputDir=/mnt/large/data/PseudoPFLOW/processing/
+outputDir=/mnt/free/owner/
 
 # Configuration for markov file paths
 pref.1=markov/asahikawa2002
