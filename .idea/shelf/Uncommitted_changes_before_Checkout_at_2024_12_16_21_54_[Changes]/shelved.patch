Index: src/pseudo/gen/Commuter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage pseudo.gen;\r\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.util.concurrent.Callable;\r\n\r\nimport jp.ac.ut.csis.pflow.routing4.res.Network;\r\nimport pseudo.acs.CensusODAccessor;\r\nimport pseudo.acs.DataAccessor;\r\nimport pseudo.acs.MNLParamAccessor;\r\nimport pseudo.acs.MkChainAccessor;\r\nimport pseudo.acs.PersonAccessor;\r\nimport pseudo.acs.CensusODAccessor.EType;\r\nimport pseudo.res.Activity;\r\nimport pseudo.res.CensusOD;\r\nimport pseudo.res.City;\r\nimport pseudo.res.EGender;\r\nimport pseudo.res.ELabor;\r\nimport pseudo.res.EMarkov;\r\nimport pseudo.res.EPurpose;\r\nimport pseudo.res.ETransition;\r\nimport pseudo.res.HouseHold;\r\nimport pseudo.res.Country;\r\nimport pseudo.res.GLonLat;\r\nimport pseudo.res.Person;\r\nimport utils.Roulette;\r\n\r\npublic class Commuter extends ActGenerator {\r\n\r\n\tprivate final CensusODAccessor odAcs;\r\n\t\r\n\tpublic Commuter(Country japan,\r\n\t\t\t\t\tMap<EMarkov,Map<EGender,MkChainAccessor>> mrkAcsMap,\r\n\t\t\t\t\tMNLParamAccessor mnlAcs,\r\n\t\t\t\t\tCensusODAccessor odAcs) {\r\n\t\tsuper(japan, mnlAcs, mrkAcsMap);\r\n\t\tthis.odAcs = odAcs;\r\n\t}\r\n\t\r\n\tprivate class ActivityTask implements Callable<Integer> {\r\n\t\tprivate final int id;\r\n\t\tprivate final List<HouseHold> households;\r\n\t\tprivate final Map<Integer, Integer> mapMotif;\r\n\t\tprivate int error;\r\n\t\tprivate int total;\r\n\r\n\t\tpublic ActivityTask(int id, List<HouseHold> households,\r\n\t\t\t\tMap<Integer, Integer> mapMotif){\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.households = households;\r\n\t\t\tthis.mapMotif = mapMotif;\r\n\t\t\tthis.total = error = 0;\r\n\t\t}\t\r\n\t\t\r\n\t\tprivate GLonLat choiceOffice(GLonLat home, EGender gender) {\r\n\t\t\tCity city = japan.getCity(home.getGcode());\r\n\t\t\tCensusOD censusOD = odAcs.get(EType.COMMUTER, city.getId());\r\n\t\t\tif (censusOD != null) {\r\n\t\t\t\tList<Double> capacities = censusOD.getCapacities(gender);\r\n\t\t\t\tif (!capacities.isEmpty()) {\r\n\t\t\t\t\tint choice = Roulette.choice(capacities, getRandom());\t\r\n\t\t\t\t\tboolean isHome = censusOD.isHome(choice);\r\n\t\t\t\t\tif (isHome) {\r\n\t\t\t\t\t\treturn home;\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\tString cityName = censusOD.getDestination(gender, choice);\r\n\t\t\t\t\t\tCity dcity = japan.getCity(cityName);\r\n\t\t\t\t\t\tif (dcity != null) {\r\n\t\t\t\t\t\t\tif (!city.getId().equals(dcity.getId())) {\r\n\t\t\t\t\t\t\t\treturn choiceDestination(dcity, ETransition.OFFICE, gender);\r\n\t\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t\treturn choiceDestination2(home, dcity, ETransition.OFFICE, gender);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tprivate ETransition freeTransitionFilter(ETransition transition) {\r\n\t\t\tif (\ttransition != ETransition.STAY && \r\n\t\t\t\t\ttransition != ETransition.HOME && \r\n\t\t\t\t\ttransition != ETransition.SHOPPING &&  \r\n\t\t\t\t\ttransition != ETransition.EATING &&  \r\n\t\t\t\t\ttransition != ETransition.HOSPITAL &&  \r\n\t\t\t\t\ttransition != ETransition.FREE && \r\n\t\t\t\t\ttransition != ETransition.BUSINESS) {\r\n\t\t\t\ttransition = ETransition.FREE;\r\n\t\t\t}\r\n\t\t\treturn transition;\r\n\t\t}\r\n\t\t\r\n\t\tprivate int createActivities(HouseHold household, Person person) {\r\n\t\t\tGLonLat home = new GLonLat(household.getHome(), household.getGcode());\r\n\t\t\tEGender gender = person.getGender();\r\n\t\t\r\n\t\t\t// Markov Accessor\r\n\t\t\tMkChainAccessor mkAcs = mrkAcsMap.get(EMarkov.LABOR).get(gender);\r\n\t\t\tboolean senior = person.getAge() >= 65;\r\n\t\t\t\r\n\t\t\t// first activity\r\n\t\t\tEPurpose prePurpose = EPurpose.HOME;\r\n\t\t\tActivity homeAct = new Activity(home, 0, 24*3600, EPurpose.HOME);\r\n\t\t\tperson.addAcitivity(homeAct);\r\n\t\t\t\r\n\t\t\t// second... activity\r\n\t\t\tGLonLat curloc = home;\r\n\t\t\tActivity preAct = homeAct;\r\n\t\t\tfor (int i = 3*3600; i < 3600*24; i += timeInterval) {\r\n\t\t\t\tETransition transition = null;\r\n\t\t\t\tList<Double> probs = mkAcs.getProbs(i, prePurpose);\r\n\r\n\t\t\t\tdouble randomValue = getRandom();\r\n\t\t\t\tint choice = Roulette.choice(probs, randomValue);\r\n\t\t\t\ttransition = mkAcs.getTransition(choice);\r\n\t\t\t\t\r\n\t\t\t\tEPurpose purpose = transition.getPurpose();\r\n\t\t\t\t\r\n\t\t\t\tif (transition != ETransition.STAY) {\r\n\t\t\t\t\t// choice destination\r\n\t\t\t\t\tif (transition == ETransition.HOME) {\r\n\t\t\t\t\t\tcurloc = home;\r\n\t\t\t\t\t}else if (transition == ETransition.OFFICE) {\r\n\t\t\t\t\t\tcurloc = person.hasOffice() ? person.getOffice() : choiceOffice(home, gender); \r\n\t\t\t\t\t\tperson.setOffice(curloc);\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\ttransition = freeTransitionFilter(transition);\r\n\t\t\t\t\t\tcurloc = choiceFreeDestination(curloc, transition, senior, gender, person.getLabor());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (curloc == null) {\r\n\t\t\t\t\t\tperson.getActivities().clear();\r\n\t\t\t\t\t\tperson.addAcitivity(homeAct);\r\n\t\t\t\t\t\treturn 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Create an activity\r\n\t\t\t\t\tpreAct = Commuter.createActivity(preAct, curloc, i, 3600*24, purpose);\r\n\t\t\t\t\tperson.getActivities().add(preAct);\r\n\t\t\t\t\t\r\n\t\t\t\t\tprePurpose = purpose;\r\n\t\t\t\t}\r\n\t\t\t}\r\n//\t\t\tif(person.getActivities().size()==1){\r\n//\t\t\t\tSystem.out.println(\"===================================================\");\r\n//\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tprivate void process(HouseHold household) {\r\n\t\t\tfor (Person person : household.getListPersons()) {\r\n\t\t\t\tint res = createActivities(household, person);\r\n\t\t\t\tif (res == 0) {\r\n\t\t\t\t\tint motif = setMotif(person);\r\n\t\t\t\t\tsynchronized(mapMotif) {\r\n\t\t\t\t\t\tint vol = mapMotif.getOrDefault(motif, 0);\r\n\t\t\t\t\t\tmapMotif.put(motif, vol + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else {\r\n\t\t\t\t\tthis.error++;\r\n\t\t\t\t}\r\n\t\t\t\tthis.total++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic Integer call() throws Exception {\r\n\t\t\ttry {\r\n\t\t\t\tfor (HouseHold household : households) {\r\n\t\t\t\t\tprocess(household);\t\t\r\n\t\t\t\t}\r\n\t\t\t}catch(Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"[%d]-%d-%d%n\",id, error, total);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\tprotected Callable<Integer> createTask(Map<Integer, Integer> mapMotif, int id, List<HouseHold> households){\r\n\t\treturn new ActivityTask(id, households, mapMotif);\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n        Country country = new Country();\r\n\r\n        System.out.println(\"start\");\r\n\r\n\t\tString output = null;\r\n\t\tString inputDir = null;\r\n\t\tString root = null;\r\n\r\n\t\tInputStream inputStream = Commuter.class.getClassLoader().getResourceAsStream(\"config.properties\");\r\n\t\tif (inputStream == null) {\r\n\t\t\tthrow new FileNotFoundException(\"config.properties file not found in the classpath\");\r\n\t\t}\r\n\t\tProperties prop = new Properties();\r\n\t\tprop.load(inputStream);\r\n\r\n\t\troot = prop.getProperty(\"root\");\r\n\t\tinputDir = prop.getProperty(\"inputDir\");\r\n\t\toutput = prop.getProperty(\"outputDir\");\r\n\t\tSystem.out.println(\"Root Directory: \" + root);\r\n\t\tSystem.out.println(\"Input Directory: \" + inputDir);\r\n\r\n        // load data\r\n        String stationFile = String.format(\"%sbase_station.csv\", inputDir);\r\n        Network station = DataAccessor.loadLocationData(stationFile);\r\n        country.setStation(station);\r\n\r\n        String cityFile = String.format(\"%scity_boundary.csv\", inputDir);\r\n        DataAccessor.loadCityData(cityFile, country);\r\n\r\n        String censusFile = String.format(\"%scity_census_od.csv\", inputDir);\r\n        CensusODAccessor odAcs = new CensusODAccessor(censusFile, country);\r\n\r\n        String hospitalFile = String.format(\"%scity_hospital.csv\", inputDir);\r\n        DataAccessor.loadHospitalData(hospitalFile, country);\r\n\r\n\t\tString restaurantFile = String.format(\"%scity_restaurant.csv\", inputDir);\r\n\t\tDataAccessor.loadRestaurantData(restaurantFile, country);\r\n\r\n\t\tString retailFile = String.format(\"%scity_retail.csv\", inputDir);\r\n\t\tDataAccessor.loadRetailData(retailFile, country);\r\n\r\n        String meshFile = String.format(\"%smesh_ecensus.csv\", inputDir);\r\n        DataAccessor.loadEconomicCensus(meshFile, country);\r\n\r\n        // load data after economic census\r\n        String tatemonFile = String.format(\"%scity_tatemono.csv\", inputDir);\r\n        DataAccessor.loadZenrinTatemono(tatemonFile, country, 1);\r\n\r\n        // load MNL parmaters\r\n        String mnlFile = String.format(\"%s/mnl/labor_params.csv\", inputDir);\r\n        MNLParamAccessor mnlAcs = new MNLParamAccessor();\r\n        mnlAcs.add(mnlFile, ELabor.WORKER);\r\n\r\n        int mfactor = 1;\r\n\r\n        // create activities\r\n\r\n        String outputDir = String.format(\"%s/activity/\", output);\r\n\r\n        long starttime = System.currentTimeMillis();\r\n        int start = 1;\r\n        for (int i = start; i <= 47; i++) {\r\n\r\n\t\t\t// load markov chains\r\n\t\t\tMap<EMarkov, Map<EGender, MkChainAccessor>> mrkMap = new HashMap<>();\r\n\t\t\t{\r\n\t\t\t\tString key = \"pref.\" + i;\r\n\t\t\t\tString relativePath = prop.getProperty(key);\r\n\t\t\t\tString maleFile = inputDir+ relativePath + \"_trip_labor_male_prob.csv\";\r\n\t\t\t\tString femaleFile = inputDir+ relativePath + \"_trip_labor_female_prob.csv\";\r\n\t\t\t\tMap<EGender, MkChainAccessor> map = new HashMap<>();\r\n\t\t\t\tmap.put(EGender.MALE, new MkChainAccessor(maleFile));\r\n\t\t\t\tmap.put(EGender.FEMALE, new MkChainAccessor(femaleFile));\r\n\t\t\t\tmrkMap.put(EMarkov.LABOR, map);\r\n\t\t\t}\r\n\t\t\tCommuter worker = new Commuter(country, mrkMap, mnlAcs, odAcs);\r\n\r\n            // create directory\r\n            File prefDir = new File(outputDir, String.valueOf(i));\r\n            System.out.println(\"Start prefecture:\" + i + prefDir.mkdirs());\r\n            File householdDir = new File(String.format(\"%s/agent/\", root), String.valueOf(i));\r\n            // String householdDir = String.format(\"%s/agent/\", root);\r\n\r\n            for (File file : householdDir.listFiles()) {\r\n                if (file.getName().contains(\".csv\")) {\r\n                    List<HouseHold> households = PersonAccessor.load(file.getAbsolutePath(), new ELabor[]{ELabor.WORKER}, mfactor);\r\n                    System.out.println(file.getName() + \" \" + households.size());\r\n                    worker.assign(households);\r\n                    String resultName = String.format(\"%s%s%s%s_labor.csv\", outputDir, i, \"/\", file.getName().replaceAll(\".csv\", \"\"));\r\n                    PersonAccessor.writeActivities(resultName, households);\r\n                }\r\n            }\r\n            System.out.println(\"end\");\r\n            long endtime = System.currentTimeMillis();\r\n\t\t\tSystem.out.println(worker.mapMotif);\r\n            System.out.println(endtime - starttime);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pseudo/gen/Commuter.java b/src/pseudo/gen/Commuter.java
--- a/src/pseudo/gen/Commuter.java	(revision 0c8778a25f7118460a14b04e6e239922d3a43f44)
+++ b/src/pseudo/gen/Commuter.java	(date 1734350456014)
@@ -1,7 +1,5 @@
-
 package pseudo.gen;
 
-
 import java.io.*;
 import java.util.*;
 import java.util.concurrent.Callable;
@@ -143,9 +141,7 @@
 					prePurpose = purpose;
 				}
 			}
-//			if(person.getActivities().size()==1){
-//				System.out.println("===================================================");
-//			}
+
 			return 0;
 		}
 		
